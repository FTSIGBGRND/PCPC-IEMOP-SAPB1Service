<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>DidiSoft.Pgp.WinRT</name>
    </assembly>
    <members>
        <member name="T:DidiSoft.Pgp.WinRT.CompressionAlgorithm">
            <summary>
            Supported compression algorithms
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.CompressionAlgorithm.Zlib">
            <summary>
            ZLib compression algorithm
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.CompressionAlgorithm.Zip">
            <summary>
            ZIP compression algorithm
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.CompressionAlgorithm.Bzip2">
            <summary>
            BZip 2 compression algorithm
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.CompressionAlgorithm.Uncompressed">
            <summary>
            Data is not compressed
            </summary>
        </member>
        <member name="T:DidiSoft.Pgp.WinRT.ContentDataType">
            <summary>
            Supported OpenPGP content types
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.ContentDataType.Binary">
            <summary>
            Binary data (Default) 
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.ContentDataType.Text">
            <summary>
            Text data mode. The content will decrypt properly on systems with alternate line endings
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.ContentDataType.Utf8">
            <summary>
            indicates that implementation believes that the literal data contains UTF-8 text
            </summary>
        </member>
        <member name="T:DidiSoft.Pgp.WinRT.CypherAlgorithm">
            <summary>
            Supported symmetric cipher algorithms
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.CypherAlgorithm.TripleDes">
            <summary>
            Triple DES. 168 bit cipher involving three applications of the DES algorithm */
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.CypherAlgorithm.Cast5">
            <summary>
            CAST 5 (Default). 128 bit cipher used since PGP 5.0
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.CypherAlgorithm.Blowfish">
            <summary>
            Blowfish
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.CypherAlgorithm.Aes128">
            <summary>
            128 bit AES (Rijndael)
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.CypherAlgorithm.Aes192">
            <summary>
            192 bit AES (Rijndael)
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.CypherAlgorithm.Aes256">
            <summary>
            256 bit AES (Rijndael)
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.CypherAlgorithm.Twofish">
            <summary>
            Twofish. 256-bit variant of former AES version
            </summary> 
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.CypherAlgorithm.Des">
            <summary>
            DES
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.CypherAlgorithm.Safer">
            <summary>
            SAFER
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.CypherAlgorithm.Idea">
            <summary>
            IDEA
            </summary>
        </member>
        <member name="T:DidiSoft.Pgp.WinRT.EcCurve">
            <summary>
            OpenPGP Elliptic Curve Cryptography (ECC) supported named curves
            defined in RFC 6637
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.EcCurve.P256">
            <summary>
            Elliptic curve over the field of 256 bit pime numbers (NIST P-256)
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.EcCurve.P384">
            <summary>
            Elliptic curve over the field of 384 bit pime numbers (NIST P-384)
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.EcCurve.P521">
            <summary>
            Elliptic curve over the field of 521 bit pime numbers (NIST P-521)
            </summary>
        </member>
        <member name="T:DidiSoft.Pgp.WinRT.HashAlgorithm">
            <summary>
            Supported hash algorithms
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.HashAlgorithm.Sha1">
            <summary>
            Secure Hash Algorithm (SHA-1)
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.HashAlgorithm.Sha224">
            <summary>
            Secure Hash Algorithm 224 bit (SHA-2 224)
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.HashAlgorithm.Sha256">
            <summary>
            Secure Hash Algorithm 256 bit (SHA-2 256)
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.HashAlgorithm.Sha384">
            <summary>
            Secure Hash Algorithm 384 bit (SHA-2 384)
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.HashAlgorithm.Sha512">
            <summary>
            Secure Hash Algorithm 512 bit (SHA-2 512)
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.HashAlgorithm.Md5">
            <summary>
            Message Digest 5
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.HashAlgorithm.Md2">
            <summary>
            Message Digest 2
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.HashAlgorithm.RipeMD160">
            <summary>
            RIPEMD-160, 160-bit message digest algorithm (RACE Integrity Primitives Evaluation Message Digest) 
            </summary>
        </member>
        <member name="T:DidiSoft.Pgp.WinRT.KeyAlgorithm">
            <summary>
            Defines the supported asymmetric encryption algorithms for OpenPGP keys. 
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.KeyAlgorithm.Rsa">
            <summary>
            RSA (Rivest, Shamir and Adleman algorithm)
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.KeyAlgorithm.ElGamal">
            <summary>
            Implementation of DH/DSS
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.KeyAlgorithm.Ec">
            <summary>
            Elliptic Curve Cryptography (ECC) in OpenPGP (RFC 6637)
            </summary>
        </member>
        <member name="T:DidiSoft.Pgp.WinRT.KeyPairInformationRT">
            <summary>
            Represents an OpenPGP key/key pair
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.SubKeys">
            <summary>
            Returns an array from all public sub keys of this key.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.PreferredCompressions">
            <summary>
            The preferred compression algorithms supported by this key.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.PreferredCyphers">
            <summary>
            The preferred cypher algorithms supported by this key.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.PreferredHashes">
            <summary>
            The preferred hash algorithms supported by this key.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.SignedWithKeyIds">
            <summary>
            Returns a list of the key Id's that have signed 
            the public key(s) included in this key pair
            </summary>
            <seealso cref="!:KeyIdToHex(long)" />
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.KeyId">
            <summary>
            Returns the Key ID of this key pair
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.KeyIdHex">
            <summary>
            Returns a string representing the hexadecimal value of the Key ID.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.Fingerprint">
            <summary>
            Returns key fingerprint.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.UserIds">
            <summary>
            Returns User Id's associated with this key.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.UserId">
            <summary>
            Returns the first User Id associated with this key.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.KeySize">
            <summary>
            Returns key size in bits.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.Algorithm">
            <summary>
            Returns the name of the key encryption asymmetric algorithm.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.ValidDays">
            <summary>
            Returns key validity period in days.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.IsLegacyRSAKey">
            <summary>
            Returns is this key a legacy RSA OpenPGP key
            </summary>
            <remarks>
            Legacy RSA keys were used by PGP 6.5 and older systems.
            </remarks>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyPairInformationRT.ExportPublicKeyAsync(Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            Exports the public key part of this key pair into a file.
            </summary>
            <param name="file">File where the public key will be exported</param>
            <param name="asciiArmored">if <c>true</c> out is ASCII armored, if <c>false</c> binary file format is used.</param>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyPairInformationRT.ExportPrivateKey(Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            Exports the private key part of this key pair into a file.
            </summary>
            <param name="file">File where the private key will be exported</param>
            <param name="asciiArmored">if <c>true</c> out is ASCII armored, if <c>false</c> binary file format is used.</param>
            
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this key pair</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyPairInformationRT.CheckPassword(System.String)">
            <summary>
            Checks if a password for a private key is correct
            </summary>
            <param name="password">password to be checked</param>
            <returns><c>true</c> if the password for the private key is correct, <c>false</c> otherwise</returns>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.IsExpired">
            <summary>
            Returns is this key expired (not usable any more)
            </summary>
            <returns><c>true</c> if the key is expired, <c>false</c> if not</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyPairInformationRT.IsExpiredOnDate(Windows.Foundation.DateTime)">
            <summary>
            Returns will this key be expired on a given date
            </summary>
            <param name="date">target Date to check for expiration</param>
            <returns><c>true</c> if the key is expired on that date, <c>false</c> if not</returns>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyPairInformationRT.HasPrivateKey">
            <summary>
            Returns is there a corresponding private key for this key pair entry in this KeyStore instance
            <br />
            For our recipients this will be false because we have only their public keys in most cases.
            </summary>
        </member>
        <member name="T:DidiSoft.Pgp.WinRT.KeyStoreRT">
            <summary>
            Key store object container
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyStoreRT.MarginalsNeeded">
            <summary>
            Sets/Gets how many signatures from marginally trusted keys are needed in order a key identity to be verified
            </summary>
            <remarks>
            The default value is 3
            </remarks>
            <value>
            how many signatures from marginally trusted keys are needed in order a key identity to be verified
            </value>
            <see cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.SetTrust(System.String,DidiSoft.Pgp.WinRT.TrustLevel)" />
            <see cref="T:DidiSoft.Pgp.WinRT.TrustLevel" />
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyStoreRT.MaxTrustDepth">
            <summary>
            Sets/Gets depth at which the Web of Trust is traversed
            </summary>
            <remarks>
            The default value is 3
            </remarks>
            <value>
            depth at which the Web of Trust is traversed
            </value>
            <see cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.IsVerified(System.String)" />
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyStoreRT.TreatPrivateKeysAsUltimatelyTrusted">
            <summary>
            Sets/Gets should imported private keys be treated as <see cref="F:DidiSoft.Pgp.WinRT.TrustLevel.Ultimate" />
            </summary>
            <remarks>
            The default value is <c>true</c>. 
            <para>
            When <c>false</c> imported private keys will be treated as <see cref="F:DidiSoft.Pgp.WinRT.TrustLevel.Unknown" />
            </para>
            </remarks>
            <value>
            should imported private keys be treated as <see cref="F:DidiSoft.Pgp.WinRT.TrustLevel.Ultimate" />
            </value>
            <see cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.IsVerified(System.String)" />
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.OpenFileAsync(Windows.Storage.StorageFile,System.String)">
            <summary>Initializes a new key store object backed by a file.</summary>
            <remarks>
            Initializes a new Key Store object.
            <para>
            The Key store file may not exist, it will be created on first key manipulation operation.
            </para>
            </remarks>
            <param name="keystoreFile">Key store file</param>
            <param name="keystorePassword">Password for the key store.</param>
            <exception cref="T:System.IO.IOException">If an I/) error occurs</exception>
            <returns>initialized <c>KeyStoreRT</c> object</returns>    
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.Purge">
            <summary>
            Clears the internal state of this key store.
            </summary>
            <remarks>
            All existing keys already contained in this key store are deleted permanently.
            <para>
            Use this method wisely.
            </para>
            </remarks>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.OpenInMemory">
            <summary>Initializes a new key store object located in-memory.</summary>
            <remarks>
            Initializes a new Key Store object.
            </remarks>
            <returns>initialized <c>KeyStoreRT</c> object</returns>    
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyStoreRT.HexKeyIds">
            <summary>
            Returns array of Hexadecimal string representation of the key Id's for the keys contained in this <c>KeyStore</c> instance.
            <para>
            This hexadecimal value is composed of the lower four bytes of the real key Id (8 bytes) and is the same as the one displayed by PGP (r) and GnuPG.
            </para>
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyStoreRT.IsInMemory">
            <summary>
            Indicates is this <c>KeyStoreRT</c> instance in-memory (<c>True</c>)
            or file based (<c>False</c>)
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.KeyStoreRT.UserIds">
            <summary>
            Returns array of Strings representing all user Id's contained in this <c>KeyStoreRT</c> instance.
            </summary>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.CheckPasswordAsync(Windows.Storage.StorageFile,System.String)">
            <summary>
            Checks if a password for a key store file is correct
            </summary>
            <param name="keyStoreStream">Stream obtained from a KeyStore file</param>
            <param name="password">password for the KeyStore</param>
            <returns><c>true</c> if the password is correct, <c>false</c> otherwise</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetKey(System.String)">
            <summary>
            Returns a <see cref="T:DidiSoft.Pgp.WinRT.KeyPairInformationRT" /> object contained in this key store instance
            </summary>
            <param name="userId">Uer Id or Hexadecimal Key Id of the key</param>
            <returns>the key oject if found or <c>null</c> if there is no such key</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetKeyIdForKeyIdHex(System.String)">
            <summary>
            Returns the real Key ID (of type <c>long</c>) corresponding to this Hexadecimal Key Id.
            </summary>
            <param name="keyIdHex">Hexadecimal Key Id used by other OpenPG software</param>
            <returns>the key Id if a match has been found or -1 if no match was found</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetKeyIdForUserId(System.String)">
            <summary>
            Returns the real Key ID (of type <c>long</c>) corresponding to this User Id.
            </summary>
            <param name="userId">User Id of the key owner</param>
            <returns>the key Id if a match has been found or -1 if no match was found</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.AddJpegImage(System.Int64,System.String,System.Byte[])">
            <summary>
            Adds a JPEG photo image to an OpenPGP key.
            </summary>
            <remarks>
            Multiple JPEG images can be added to an OpenPGP key.
            <para>
            The private key component of the OpenPGP key must also be located in the same <see cref="T:DidiSoft.Pgp.KeyStore" />
            </para>
            </remarks>
            <seealso cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.DeleteJpegImage(System.Int64,System.Int32)" />
            <seealso cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetJpegImagesCount(System.Int64)" />
            <seealso cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetJpegImageData(System.Int64,System.Int32)" />
            <param name="keyId">Key Id of the OpenPGP key that will accept the JPEG photo image</param>
            <param name="privateKeyPassword">The password of the private key component of the OpenPGP key </param>
            <param name="jpegImageData">JPEG image file data as array of bytes</param>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified Key Id in this <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if there is no private key with the specified Key Id in this <see cref="T:DidiSoft.Pgp.KeyStore" /></exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">general PGP error</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.DeleteJpegImage(System.Int64,System.Int32)">
            <summary>
            Removes a JPEG photo image from an OpenPGP key
            </summary>
            <param name="keyId">Key Id of the target OpenPGP key</param>
            <param name="imageId">target image sequence id, between 0 and <see cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetJpegImagesCount(System.Int64)" />-1</param>
            <returns>true if the image was removed successfully, otherwise false</returns>
            <exception cref="T:System.IndexOutOfRangeException">if imageId is not in the valid range</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified Id</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetJpegImageData(System.Int64,System.Int32)">
            <summary>
            Retrieves the associated JPEG photo image bytes from an OpenPGP key
            </summary>
            <param name="keyId">Key Id of the OpenPGP key that contains the image</param>
            <param name="imageId">image sequence Id, must be between 0 and <see cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetJpegImagesCount(System.Int64)" />-1</param>
            <returns>array of bytes, obtained from the JPEG image</returns>
            <exception cref="T:System.IndexOutOfRangeException">if imageId is not in the valid range</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">if there is no public key with the specified Id</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetJpegImagesCount(System.Int64)">
            <summary>
            Retrieves the number of JPEG photo images associated with an OpenPGP key
            </summary>
            <param name="keyId">Key Id of the OpenPGP key</param>
            <returns>number of JPEG photo images contained in the OpenPGP key</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.AddUserId(System.Int64,System.String,System.String)">
            <summary>
            Appends an additional User Id signature to a key contained in this key store.
            </summary>
            
            <remarks>
            Note that you must also have the corresponding private key in the same key store.
            <para>
            For an example check the file PGPLibExampleCS\KeyStoreChangeUserId.cs or PGPLibExampleVB\KeyStoreChangeUserId.vb 
            located in the Examples folder in the library installation folder.
            </para>
            </remarks>
            
            <param name="keyId">target key Id</param>
            <param name="privateKeyPassword">the password of the corresponding private key</param>
            <param name="newUserId">the new user Id to be added</param>
            
            <seealso cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetKeyIdForKeyIdHex(System.String)" />
            <seealso cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetKeyIdForUserId(System.String)" />
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.DeleteUserId(System.Int64,System.String)">
            <summary>
            Removes a user Id signature from a key
            </summary>
            <para>
            For an example check the file PGPLibExampleCS\KeyStoreChangeUserId.cs or PGPLibExampleVB\KeyStoreChangeUserId.vb 
            located in the Examples folder in the library installation folder.
            </para>
            
            <param name="keyId">target key Id</param>
            <param name="userId">user Id to be removed</param>
            
            <returns><see langword="true" /> if the user id signature was removed, 
                <see langword="false" /> if there was no such user id signature</returns>
                
            <seealso cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetKeyIdForKeyIdHex(System.String)" />
            <seealso cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetKeyIdForUserId(System.String)" />
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.ChangeUserId(System.Int64,System.String,System.String,System.String)">
            <summary>
            Changes an existing user Id signature of a key with a new user Id
            </summary>
            <para>
            For an example check the file PGPLibExampleCS\KeyStoreChangeUserId.cs or PGPLibExampleVB\KeyStoreChangeUserId.vb 
            located in the Examples folder in the library installation folder.
            </para>
            
            <param name="keyId">target key Id</param>
            <param name="privateKeyPassword">the password of the corresponding private key</param>
            <param name="oldUserId">the old user Id to be changed </param>
            <param name="newUserId">the new user Id to be added</param>
            
            <returns><see langword="true" /> if the user id signature was changed, 
                <see langword="false" /> if there was no such user id signature</returns>
                
            <seealso cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetKeyIdForKeyIdHex(System.String)" />
            <seealso cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetKeyIdForUserId(System.String)" />
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.ChangePrimaryUserId(System.Int64,System.String,System.String)">
            <summary>
            Changes the primary (first) user Id signature of a key with a new user Id
            </summary>
            <para>
            For an example check the file PGPLibExampleCS\KeyStoreChangeUserId.cs or PGPLibExampleVB\KeyStoreChangeUserId.vb 
            located in the Examples folder in the library installation folder.
            </para>
            
            <param name="keyId">target key Id</param>
            <param name="privateKeyPassword">the password of the corresponding private key</param>
            <param name="newUserId">the new user Id to be added</param>
            
            <seealso cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetKeyIdForKeyIdHex(System.String)" />
            <seealso cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetKeyIdForUserId(System.String)" />
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.ContainsKey(System.String)">
            <summary>
            Checks is there a key with the specified User Id in this Key Store
            </summary>
            <param name="userId">User Id or hexadecimal Key ID of the key in question</param>
            <returns>Returns <c>true</c> if this key store contains key with the specified User Id, <c>false</c> otherwise</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.ContainsPublicKey(System.String)">
            <summary>
            Checks is there a public key with the specified User Id in this Key Store
            </summary>
            <param name="userId">User Id or hexadecimal Key ID of the key in question</param>
            <returns>Returns <c>true</c> if this key store contains public key with the specified User Id, <c>false</c> otherwise</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.ContainsPrivateKey(System.String)">
            <summary>
            Checks is there a private key with the specified User Id in this Key Store
            </summary>
            <param name="userId">User Id or hexadecimal Key ID of the key in question</param>
            <returns>Returns <c>true</c> if this key store contains private key with the specified User Id, <c>false</c> otherwise</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.DeleteKeyPair(System.String)">
            <summary>
            Deletes the first key pair (public and private key) from this key store that has the specified userId. 
            </summary>
            <param name="userId">User Id or hexadecimal Key ID of the key pair to be deleted</param>
            <returns>Returns <c>true</c> if a key pair with the specified User Id was deleted, <c>false</c> if no key with such User Id has been found</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.DeletePrivateKey(System.String)">
            <summary>
            Deletes the first private key from this key store that has the specified User Id.
            </summary>
            <param name="userId">User Id or hexadecimal Key ID of the private key to be deleted</param>
            <returns>Returns <c>true</c> if the private key with the specified User Id was deleted, <c>false</c> if no private key with such User Id has been found</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.DeletePublicKey(System.String)">
            <summary>
            Deletes the first public key pair from this key store that has the specified User Id.
            </summary>
            <param name="userId">User Id or hexadecimal Key ID of the public key to be deleted</param>
            <returns>Returns <c>true</c> if the public key with the specified User Id was deleted, <c>false</c> if no public key with such User Id has been found</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.ExportKeyRingAsync(Windows.Storage.StorageFile,System.String,System.Boolean)">
            <summary>Exports a key pair (the public and private key combined) located in this key store into a file</summary>
            <remarks>The private key part of the key pair is exported only if exists.</remarks>
            
            <param name="toFile">File where the key pair will be saved</param>
            <param name="userId">User Id or hexadecimal Key ID of the key pair to be exported</param>
            <param name="asciiArmored">if <c>true</c> the output is ASCII armored, when <c>false</c> it is in binary format</param>
            
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If there is no such key</exception>
            <exception cref="T:System.IO.IOException">in case of I/O error</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.ExportPrivateKeyAsync(Windows.Storage.StorageFile,System.String,System.Boolean)">
            <summary>Exports a private key from this OpenPGP key store into a file</summary>
            <param name="toFile">File where the key will be exported</param>
            <param name="userId">User Id or hexadecimal Key ID of the private key to be exported</param>
            <param name="asciiArmored">If true, output is in ASCII armored format, otherwise in binary format</param>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this key pair</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.ExportPublicKeyAsync(Windows.Storage.StorageFile,System.String,System.Boolean)">
            <summary>Exports a private key from this OpenPGP key store into a file</summary>
            <param name="toFile">File where the key will be exported</param>
            <param name="userId">User Id or hexadecimal Key ID of the private key to be exported</param>
            <param name="asciiArmored">If true, output is in ASCII armored format, otherwise in binary format</param>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no private key in this key pair</exception>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GenerateKeyPairAsync(System.Int32,System.String,DidiSoft.Pgp.WinRT.KeyAlgorithm,System.String,DidiSoft.Pgp.WinRT.CompressionAlgorithm[],DidiSoft.Pgp.WinRT.HashAlgorithm[],DidiSoft.Pgp.WinRT.CypherAlgorithm[],Windows.Foundation.DateTime)">
            <summary>
            Generates a PGP key pair (public and private key) that expires on given date.
            <para>
            The newly generated key is stored in this KeyStore instance.
            </para>
            </summary>
            <remarks>
            Note: for key size larger than 2048 bits key generation will take a few moments.
            </remarks>
            <param name="keySize">Size of the keys</param>
            <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
            <param name="keyAlgorithm">Key algorithm. Possible values: ELGAMAL, RSA</param>
            <param name="password">Secret key password</param>
            <param name="compressionTypes">Array of preferred compression algorithms supported by the key.</param>
            <param name="hashingAlgorithmTypes">Array of preferred hashing algorithms supported by the key.</param>
            <param name="cipherTypes">Array of preferred symmetric encryption algorithms supported by the key.</param>
            <param name="validToDate">Expiration date for this key</param>
            
            <returns><see cref="T:DidiSoft.Pgp.WinRT.KeyPairInformationRT" /> class representing the generated key pair</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GenerateEccKeyPairAsync(DidiSoft.Pgp.WinRT.EcCurve,System.String,System.String)">
            <summary>
            Generates an Elliptic Curve OpenPGP key pair with default values for preferred compression, hashing and cypher
            </summary>
            <remarks>
            The newly generated key is stored in this key store instance.
            </remarks>
            <param name="ecCurve">Elliptic Curve used in the key generation</param>
            <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
            <param name="password">Secret key password</param>
            
            <returns><see cref="T:DidiSoft.Pgp.WinRT.KeyPairInformationRT" /> class representing the generated key pair</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GenerateEccKeyPairAsync(DidiSoft.Pgp.WinRT.EcCurve,System.String,System.String,DidiSoft.Pgp.WinRT.CompressionAlgorithm[],DidiSoft.Pgp.WinRT.HashAlgorithm[],DidiSoft.Pgp.WinRT.CypherAlgorithm[])">
            <summary>
            Generates an Elliptic Curve OpenPGP key pair with specified preferred algorithms and no expiration date
            </summary>
            <remarks>
            The newly generated key is stored in this key store instance.
            </remarks>
            <param name="ecCurve">Elliptic Curve used in the key generation</param>
            <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
            <param name="password">Secret key password</param>
            <param name="compressionTypes">Array of preferred compression algorithms supported by the key.</param>
            <param name="hashingAlgorithmTypes">Array of preferred hashing algorithms supported by the key.</param>
            <param name="cipherTypes">Array of preferred symmetric encryption algorithms supported by the key.</param>
            <param name="validToDate">Expiration date for this key</param>
            
            <returns><see cref="T:DidiSoft.Pgp.WinRT.KeyPairInformationRT" /> class representing the generated key pair</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GenerateEccKeyPairAsync(DidiSoft.Pgp.WinRT.EcCurve,System.String,System.String,DidiSoft.Pgp.WinRT.CompressionAlgorithm[],DidiSoft.Pgp.WinRT.HashAlgorithm[],DidiSoft.Pgp.WinRT.CypherAlgorithm[],Windows.Foundation.DateTime)">
            <summary>
            Generates an Elliptic Curve OpenPGP key pair with specified preferred algorithms and expiration date
            </summary>
            <remarks>
            The newly generated key is stored in this key store instance.
            </remarks>
            <param name="ecCurve">Elliptic Curve used in the key generation</param>
            <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
            <param name="password">Secret key password</param>
            <param name="compressionTypes">Array of preferred compression algorithms supported by the key.</param>
            <param name="hashingAlgorithmTypes">Array of preferred hashing algorithms supported by the key.</param>
            <param name="cipherTypes">Array of preferred symmetric encryption algorithms supported by the key.</param>
            <param name="validToDate">Expiration date for this key</param>
            
            <returns><see cref="T:DidiSoft.Pgp.WinRT.KeyPairInformationRT" /> class representing the generated key pair</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GenerateElgamaKeyPairAsync(System.Int32,System.String,System.String)">
            <summary>
            Generates an Elgama (DH/DSS) OpenPGP key pair (public and private key) with default values for preferred compression, hashing and cypher
            <para>
            The newly generated key is stored in this key store instance.
            </para>
            </summary>
            <remarks>
            Note: for key size larger than 2048 bits key generation will take a few moments.
            </remarks>
            <param name="keySize">Size of the keys</param>
            <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
            <param name="password">Secret key password</param>
            
            <returns><see cref="T:DidiSoft.Pgp.WinRT.KeyPairInformationRT" /> class representing the generated key pair</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GenerateRsaKeyPairAsync(System.Int32,System.String,System.String)">
            <summary>
            Generates an RSA OpenPGP key pair (public and private key) with default values for preferred compression, hashing and cypher
            <para>
            The newly generated key is stored in this key store instance.
            </para>
            </summary>
            <remarks>
            Note: for key size larger than 2048 bits key generation will take a few moments.
            </remarks>
            <param name="keySize">Size of the keys</param>
            <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
            <param name="password">Secret key password</param>
            
            <returns><see cref="T:DidiSoft.Pgp.WinRT.KeyPairInformationRT" /> class representing the generated key pair</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GenerateKeyPairAsync(System.Int32,System.String,DidiSoft.Pgp.WinRT.KeyAlgorithm,System.String,DidiSoft.Pgp.WinRT.CompressionAlgorithm[],DidiSoft.Pgp.WinRT.HashAlgorithm[],DidiSoft.Pgp.WinRT.CypherAlgorithm[])">
            <summary>
            Generates a PGP key pair (public and private key) that does not expires.
            <para>
            The newly generated key is stored in this key store instance.
            </para>
            </summary>
            <remarks>
            Note: for key size larger than 2048 bits key generation will take a few moments.
            </remarks>
            <param name="keySize">Size of the keys</param>
            <param name="userId">User Id of the form "name (comment) &lt;email address&gt;"</param>
            <param name="keyAlgorithm">Key algorithm. Possible values: ELGAMAL, RSA</param>
            <param name="password">Secret key password</param>
            <param name="compressionTypes">Array of compression algorithms supported by the key.</param>
            <param name="hashingAlgorithmTypes">Array of hashing algorithms supported by the key.</param>
            <param name="cipherTypes">Array of symmetric encryption algorithms supported by the key.</param>
            
            <returns><see cref="T:DidiSoft.Pgp.WinRT.KeyPairInformationRT" /> class representing the generated key pair</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.ImportKeyRingAsync(Windows.Storage.StorageFile)">
            <summary>
            Imports an OpenPGP key ring (one key pair or multiple keys) in this <c>KeyStore</c> instance.
            </summary>
            <remarks>
            The key ring may contain public, private or both type of keys.
            </remarks>
            <param name="file">OpenPGP key/keyring file to be imported</param>
            <returns>array of <see cref="T:DidiSoft.Pgp.WinRT.KeyPairInformationRT" /> objects representing the imported keys</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.ImportPrivateKeyAsync(Windows.Storage.StorageFile)">
            <summary>
            Imports and OpenPGP private key into a custom OpenPGP key store. 
            </summary>
            <remarks>
            If the stream contains more than one private keys, only the first one is imported
            </remarks>
            <param name="file">Private key file to be imported</param>
            
            <returns>A <see cref="T:DidiSoft.Pgp.WinRT.KeyPairInformationRT" /> object representing the imported private key</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.ImportPublicKeyAsync(Windows.Storage.StorageFile)">
            <summary>
            Imports an OpenPGP public key into this key store instance.
            </summary>
            <remarks>
            If the stream contains more than one public keys, only the first one is imported
            </remarks>
            <param name="file">File containing the public key to be imported </param>
            <returns>A <see cref="T:DidiSoft.Pgp.WinRT.KeyPairInformationRT" /> representing the imported key</returns>
            
            <exception cref="!:WrongPublicKeyException">If there is no public key in this source</exception>
            <exception cref="T:System.IO.IOException">I/O error</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.IsTrusted(System.String)">
            <summary>
            Checks is a public key trusted in this Key store.
            </summary>
            <param name="userId">User Id or hexadecimal Key ID of the key to be checked</param>
            <returns><c>true</c> if this key is trusted in this key store, <c>false</c> otherwise</returns>
            
            <exception cref="!:WrongPublicKeyException">If there is no public key with the specified Id</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.ImportKeyStore(DidiSoft.Pgp.WinRT.KeyStoreRT)">
            <summary>
            Imports the keys contained in a key store object into the current key store instance.
            </summary>
            <param name="keyStore">source key store to import from</param>
            <returns>array of <see cref="T:DidiSoft.Pgp.WinRT.KeyPairInformationRT" /> objects representing the imported keys</returns>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.Save(DidiSoft.Pgp.KeyStore,System.EventArgs)">
            <summary>
            Private handler for the OnSave event of the encapsulated KeyStore object 
            </summary>
            <param name="store"></param>
            <param name="e"></param>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.SetTrust(System.String,DidiSoft.Pgp.WinRT.TrustLevel)">
            <summary>
            Sets an internal trust value for a public key, valid only in this KeyStore instance
            </summary>
            <remarks>
            PGP command line (r) equivalent:
            <para>
            pgp --set-trust keyId --trust trustValue
            </para>
            </remarks>
            <param name="userId">User Id of the public key</param>
            <param name="trustValue">trust amount</param>
            
            <see cref="T:DidiSoft.Pgp.WinRT.TrustLevel" />
            
            <exception cref="!:WrongPublicKeyException">If there is no public key with the specified Id</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetTrust(System.String)">
            <summary>
            Returns the trust value of a public key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> instance
            </summary>
            <param name="userId">User Id or hexadecimal Key ID of the key to be checked</param>
            <returns>The whole <see cref="T:DidiSoft.Pgp.WinRT.TrustLevel" /> value of the trust for this key</returns>
            
            <exception cref="!:WrongPublicKeyException">If there is no public key with the specified Id</exception>
            
            <seealso cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.SetTrust(System.String,DidiSoft.Pgp.WinRT.TrustLevel)" />
            <seealso cref="!:GetOwnTrust(String)" />
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetOwnerTrust(System.String)">
            <summary>
            Returns the owner (set by us) trust value of a public key in this <see cref="T:DidiSoft.Pgp.KeyStore" /> instance
            </summary>
            <param name="userId">User Id or hexadecimal Key ID of the key to be checked</param>
            <returns>The owner <see cref="T:DidiSoft.Pgp.WinRT.TrustLevel" /> value of the trust for this key</returns>
            
            <exception cref="!:WrongPublicKeyException">If there is no public key with the specified Id</exception>
            
            <seealso cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.SetTrust(System.String,DidiSoft.Pgp.WinRT.TrustLevel)" />
            <seealso cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.GetTrust(System.String)" />
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.IsVerified(System.String)">
            <summary>
            Checks is a public key trusted in this <see cref="T:DidiSoft.Pgp.KeyStore" /> instance
            </summary>
            <param name="userId">User Id or hexadecimal Key ID of the key to be checked</param>
            <returns><c><see langword="true" /></c> if this key is trusted in this key store, <see langword="false" /> otherwise</returns>
            
            <exception cref="!:WrongPublicKeyException">If there is no public key with the specified Id</exception>
            
            <seealso cref="M:DidiSoft.Pgp.WinRT.KeyStoreRT.SetTrust(System.String,DidiSoft.Pgp.WinRT.TrustLevel)" />
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.SignPublicKey(System.String,System.String,System.String)">
            <summary>
            Signs a public key with a private key.
            </summary>
            <remarks>
            Signing a key certifies that you know the owner of the keys.
            <para>
            When you import keys into your <see cref="T:DidiSoft.Pgp.KeyStore" /> and are sure that the trusted third party 
            is really the organization/person they claim to be, you can sign his/her keys.
            </para>
            <para>
            PGP command line(r) equivalent:
            </para>
            <para>
            pgp --sign-key keyUserId  --signer signingKeyUserId --sig-type exportable
            </para>
            <para>
            GnuPG equivalent command:
            </para>
            <para>
            gpg --local-user signingKeyUserId --sign-key keyUserId
            </para>
            </remarks>
            <param name="keyUserId">User Id of the public key to be signed</param>
            <param name="signingKeyUserId">User Id of the own private key to be used for signing</param>
            <param name="signingKeyPassword">Password of the own private key</param>
            
            <exception cref="!:WrongPrivateKeyException">No private key has been found with such Key Id</exception>
            <exception cref="!:WrongPublicKeyException">No public key has been found with such Key Id</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">OpenPGP signing error</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.SignPublicKeyAsTrustedIntroducer(System.String,System.String,System.String,System.Byte,System.Boolean)">
            <summary>
            Signs a public key as trusted introducer
            </summary>
            <remarks>
            Signs the key indicating that the owner of the key should be completely trusted to vouch for other keys.
            <para>
            PGP command line(r) equivalent:
            </para>
            pgp --sign-key userId  --signer signingKeyUserId --sig-type trusted-introducer 
            </remarks>
            <param name="userId">User ID of the public key to be signed</param>
            <param name="signingKeyUserId">User ID or hexadecimal Key Id of the private key used to sign the public key with</param>
            <param name="signingKeyPassword">Password of the own private key</param>
            <param name="trustDepth">Trust depth</param>
            <param name="exportable">Will this signature be exportable</param>
            
            <exception cref="!:WrongPrivateKeyException">No private key has been found with such Key Id</exception>
            <exception cref="!:WrongPublicKeyException">No public key has been found with such Key Id</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">OpenPGP signing error</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.convertHash(DidiSoft.Pgp.HashAlgorithm)">
            <summary>
            Converts between the WinRT Hash enum and the standard one 
            </summary>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.convertCompression(DidiSoft.Pgp.CompressionAlgorithm)">
            <summary>
            Converts between the WinRT Compression enum and the standard one 
            </summary>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.KeyStoreRT.convertCypher(DidiSoft.Pgp.CypherAlgorithm)">
            <summary>
            Converts between the WinRT Compression enum and the standard one 
            </summary>
        </member>
        <member name="T:DidiSoft.Pgp.WinRT.PGPError">
            <summary>
            Provides OpenPGP error statuses for operations with <see cref="T:DidiSoft.Pgp.WinRT.PGPLibRT" />
            </summary>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPError.GetStatus(System.Int32)">
            <summary>
            Gets an error status value based on an error encountered by an OpenPGP operation
            </summary>
            <param name="hresult">The error encountered by an OpenPGP operation represented as an HRESULT.</param>
            <returns>The OpenPGP error status value for an OpenPGP operation.</returns>
            <seealso cref="T:DidiSoft.Pgp.WinRT.PGPErrorStatus" />
        </member>
        <member name="T:DidiSoft.Pgp.WinRT.PGPErrorStatus">
            <summary>
            Specifies status values for an OpenPGP operation.
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.PGPErrorStatus.Unknown">
            <summary>
            I/O error or other error
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.PGPErrorStatus.GeneralPgpError">
            <summary>
            General OpenPGP error
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.PGPErrorStatus.FileIsEncrypted">
            <summary>
            The provided file is encrypted, you have to use decryption method that accepts private key
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.PGPErrorStatus.FileIsPBEEncrypted">
            <summary>
            The provided file is encrypted, you have to use decryption method that accepts a password
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.PGPErrorStatus.FileIsCorrupted">
            <summary>
            The provided file is corrupted
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.PGPErrorStatus.KeyIsExpired">
            <summary>
            The provided public key is expired
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.PGPErrorStatus.KeyIsRevoked">
            <summary>
            The provided public key is revoked
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.PGPErrorStatus.NonPGPData">
            <summary>
            The provided file is not an OpenPGP data or is corrupted
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.PGPErrorStatus.WrongPassword">
            <summary>
            The provided password does not match 
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.PGPErrorStatus.WrongPrivateKey">
            <summary>
            The provided key file is not an OpenPGP private key
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.PGPErrorStatus.WrongPublicKey">
            <summary>
            The provided key file is not an OpenPGP public key
            </summary>
        </member>
        <member name="T:DidiSoft.Pgp.WinRT.PGPLibRT">
            <summary>
            The main class that provides OpenPGP encryption methods
            </summary>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.#ctor">
            <summary>
            Creates an instance of the library
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPLibRT.UseExpiredKeys">
            <summary>
            Returns should expired keys still be used
            </summary>
            <remarks>
            Default is <c>false</c>
            </remarks>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPLibRT.UseRevokedKeys">
            <summary>
            Returns should revoked keys still be used
            </summary>
            <remarks>
            Default is <c>false</c>
            </remarks>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPLibRT.AsciiVersionHeader">
            <summary>
            Version comment text that is printed in ASCII armored output
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPLibRT.ContentType">
            <summary>
            Gets/Sets the type of the data to be encrypted.
            </summary>
            <remarks>
            This is useful when exchanging textual data between systems with different line endings
            <para>
            Default is ContentDataType.Binary
            </para>
            </remarks>
            <example>
            This example demonstrates how to specify that the subsequently encrypted data is text
            <code lang="cs">
            PGPLibRT pgp = new PGPLibRT();
            pgp.ContentType = ContentDataType.Text;
            // now in subsequent encrypt calls the data will be stored with preserved line endings
            </code>
            <code lang="vbnet">
            Dim pgp As New PGPLibRT()
            pgp.ContentType = ContentDataType.Text
            ' now in subsequent encrypt calls the data will be stored with preserved line endings
            </code>
            </example>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPLibRT.Hash">
            <summary>
            Gets/Sets the preferred hashing algorithm used by all methods that produce OpenPGP signatures (all Sign and SigneAndEncrypt methods)
            </summary>
            <remarks>
            Default is SHA1
            </remarks>
            <example>
            This example demonstrates how to change the preferred hash algorithm used by the library. 
            <code lang="cs">
            PGPLibRT pgp = new PGPLibRT();
            pgp.Hash = HashAlgorithm.Sha256;
            </code>
            <code lang="vbnet">
            Dim pgp As New PGPLibRT()
            pgp.Hash = HashAlgorithm.Sha256
            </code>
            </example>
            <seealso cref="T:DidiSoft.Pgp.WinRT.HashAlgorithm" />
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression">
            <summary>
            Gets/Sets the preferred compression algorithm used by all methods that produce OpenPGP messages (e.g Encrypt, Sign, etc.)
            </summary>
            <remarks>
            Default is ZIP
            </remarks>
            <example>
            This example demonstrates how to change the preferred compression algorithm used by the library. 
            <code lang="cs">
            PGPLibRT pgp = new PGPLibRT();
            pgp.Compression = CompressionAlgorithm.Zlib;
            </code>
            <code lang="vbnet">
            Dim pgp As New PGPLibRT()
            pgp.Compression = CompressionAlgorithm.Zlib
            </code>
            </example>	
            <seealso cref="T:DidiSoft.Pgp.WinRT.CompressionAlgorithm" />
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher">
            <summary>
            Gets/Sets the preferred symmetric key algorithm used by all methods that produce encrypted OpenPGP messages (Encrypt, SignAndEncrypt).
            <br></br><br></br>
            Changes to this property have effect on subsequent calls of encryption methods
            </summary>
            <remarks>
            Default is CAST5
            </remarks>
            <example>
            This example demonstrates how to change the preferred cipher algorithm used by the library. 
            <code lang="cs">
            PGPLibRT pgp = new PGPLibRT();
            pgp.Cypher = CypherAlgorithm.TripleDes;
            </code>
            <code lang="vbnet">
            Dim pgp As New PGPLibRT()
            pgp.Cypher = CypherAlgorithm.TripleDes
            </code>
            </example>	
            <seealso cref="T:DidiSoft.Pgp.WinRT.CypherAlgorithm" />
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPLibRT.IntegrityProtectArchives">
            <summary>
            Property that enables integrity protection of subsequently generated OpenPGP encrypted archives.
            </summary>
            <remarks>
            Default is <c>false</c>.
            <para>
            If enabled (<c>true</c>) the generated archives are not compatible with PGP(r) 6.5.8 and lower
            </para>
            </remarks>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.EncryptFileAsync(Windows.Storage.StorageFile,Windows.Storage.StorageFile,Windows.Storage.StorageFile)">
            <summary>
            OpenPGP encrypts given file using the first available public key from a key ring file
            </summary>
            
            <remarks>
            The encrypted file is in ASCII armored format with no integrity check, 
            this is the most compatible format with old versions of the original PGP program.
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            </para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="dataFile">File to be encrypted </param> 
            <param name="publicKeyFile">Recipient public key file </param>
            <param name="encryptedFile">Output encrypted file</param>
            
            <example>
            This example encrypts a file located in the Documents folder. 
            <para>
            Note: Proper file access rights must be set in the Package.appxmanifest file.
            </para>
            <code lang="C#">
            using System;
            using System.Threading.Tasks;
            using Windows.Storage;
            using DidiSoft.Pgp.WinRT;
            
            public class Demo
            {
             public async Task EncryptDemo()
             {
                // Data file to be encrypted
            	StorageFile dataFile = await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt");
            	// Usually the public key of the recipient
            	StorageFile publicKeyFile = await KnownFolders.DocumentsLibrary.GetFileAsync("public_key.asc");
            
            	StorageFile encryptedFile = 
            	      await KnownFolders.DocumentsLibrary.CreateFileAsync("output.pgp", 
            	                                                          CreationCollisionOption.ReplaceExisting);
            
                // Create an instance of the library
            	PGPLibRT pgp = new PGPLibRT();
            	await pgp.EncryptFileAsync(dataFile, publicKeyFile, encryptedFile);
             }
            }
            </code>
            <code lang="VB">
            Imports System
            Imports System.Threading.Tasks
            Imports Windows.Storage
            Imports DidiSoft.Pgp.WinRT
            
            Public Class Demo
            	Public Async Function EncryptDemo() As Task
            	    ' Data file to be encrypted
            		Dim dataFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt")
            		' Usually the public key of the recipient
            		Dim publicKeyFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("public_key.asc")
                    
            		Dim encryptedFile As StorageFile = _
            		          Await KnownFolders.DocumentsLibrary.CreateFileAsync("output.pgp", _
            		                                                              CreationCollisionOption.ReplaceExisting)
            
                    ' Create an instance of the library
            		Dim pgp As New PGPLibRT()
            		Await pgp.EncryptFileAsync(dataFile, publicKeyFile, encryptedFile)
            	End Function
            End Class
            </code>
            <code lang="JScript">
            function encryptDemo() {
                    var pgp = new DidiSoft.Pgp.WinRT.PGPLibRT();
            }
            </code>
            </example>
              
            <exception cref="T:System.IO.IOException">I/O error</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.EncryptFileAsync(Windows.Storage.StorageFile,Windows.Storage.StorageFile,Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            OpenPGP encrypts given file using the first available public key from a key ring file
            </summary>
            
            <remarks>
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            </para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="dataFile">File to be encrypted </param> 
            <param name="publicKeyFile">Recipient public key file </param>
            <param name="encryptedFile">Output encrypted file</param>
            <param name="asciiArmor">Should the encrypted file be in ASCII Armored format. If <c>false</c> the encrypted file is in binary format.</param>
              
            <example>
            This example encrypts a file located in the Documents folder. 
            <para>
            Note: Proper file access rights must be set in the Package.appxmanifest file.
            </para>
            <code lang="C#">
            using System;
            using System.Threading.Tasks;
            using Windows.Storage;
            using DidiSoft.Pgp.WinRT;
            
            public class Demo
            {
             public async void EncryptDemo()
             {
                // Data file to be encrypted
            	StorageFile dataFile = await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt");
            	// Usually the public key of the recipient
            	StorageFile publicKeyFile = await KnownFolders.DocumentsLibrary.GetFileAsync("public_key.asc");
            
            	StorageFile encryptedFile = 
            	   await KnownFolders.DocumentsLibrary.CreateFileAsync("output.pgp", 
            	                                                       CreationCollisionOption.ReplaceExisting);
            
                // Create an instance of the library
            	PGPLibRT pgp = new PGPLibRT();
            	// should the output be in binary (false) or ASCII armoured format (true)
            	bool asciiArmour = true;
            	await pgp.EncryptFileAsync(dataFile, publicKeyFile, encryptedFile, asciiArmour);
             }
            }
            </code>
            <code lang="VB">
            Imports System
            Imports System.Threading.Tasks
            Imports Windows.Storage
            Imports DidiSoft.Pgp.WinRT
            
            Public Class Demo
            	Public Async Sub EncryptDemo()
            	    ' Data file to be encrypted
            		Dim dataFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt")
            		' Usually the public key of the recipient
            		Dim publicKeyFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("public_key.asc")
            
            		Dim encryptedFile As StorageFile = _
            		    Await KnownFolders.DocumentsLibrary.CreateFileAsync("output.pgp", _
            		                                                        CreationCollisionOption.ReplaceExisting)
            
                    // Create an instance of the library
            		Dim pgp As New PGPLibRT()
            		' should the output be in binary (false) or ASCII armoured format (true)
            		Dim asciiArmour As Boolean = True
            		Await pgp.EncryptFileAsync(dataFile, publicKeyFile, encryptedFile, asciiArmour)
            	End Sub
            End Class
            </code>
            </example>
            
            <exception cref="T:System.IO.IOException">I/O error</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.EncryptStreamAsync(Windows.Storage.Streams.IInputStream,System.String,Windows.Storage.Streams.IInputStream,Windows.Storage.Streams.IOutputStream,System.Boolean)">
            <summary>
            OpenPGP encrypts given stream using the first available public key from a pgp key stream
            </summary>
            
            <remarks>
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            </para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="dataStream">data stream to be encrypted </param> 
            <param name="fileNameLabel">Internal file name label that will be associated with the encrypted data and will be read by other OpenPGP programs</param>
            <param name="publicKeyStream">Recipient public key as input stream</param>
            <param name="encryptedStream">Output encrypted stream</param>
            <param name="asciiArmor">Should the encrypted output be in ASCII Armored format. If <c>false</c> the encrypted file is in binary format.</param>
              
            <exception cref="T:System.IO.IOException">I/O error</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.EncryptStreamAsync(Windows.Storage.Streams.IInputStream,System.String,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,Windows.Storage.Streams.IOutputStream,System.Boolean)">
            <summary>
            OpenPGP encrypts given file using the first available public key from a key ring file
            </summary>
            
            <remarks>
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            </para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="dataStream">stream containing the data to be encrypted </param> 
            <param name="fileNameLabel">internal file name label associated wih the encrypted data and readable by other OpenPGP programs</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> object containing the encryption keys</param>
            <param name="userId">User Id or hexadecimal Key ID of the recipient's public key</param>
            <param name="encryptedStream">Output encrypted stream</param>
            <param name="asciiArmor">Should the encrypted file be in ASCII Armored format. If <c>false</c> the encrypted file is in binary format.</param>
              
            <exception cref="T:System.IO.IOException">I/O error</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.EncryptStreamAsync(Windows.Storage.Streams.IInputStream,Windows.Storage.Streams.IInputStream,Windows.Storage.Streams.IOutputStream,System.Boolean)">
            <summary>
            OpenPGP encrypts given stream using the first available public key from a pgp key stream
            </summary>
            
            <remarks>
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            </para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="dataStream">data stream to be encrypted </param> 
            <param name="publicKeyStream">Recipient public key as input stream</param>
            <param name="encryptedStream">Output encrypted stream</param>
            <param name="asciiArmor">Should the encrypted output be in ASCII Armored format. If <c>false</c> the encrypted file is in binary format.</param>
              
            <exception cref="T:System.IO.IOException">I/O error</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.EncryptStringAsync(System.String,Windows.Storage.StorageFile)">
            <summary>
            OpenPGP encrypts given String message using a public key file
            </summary>
            
            <param name="message">Message to be encrypted</param> 
            <param name="publicKeyFile">Recipient's public key file </param>
            <returns>The OpenPGP encrypted message in ASCII armoured format</returns>
              
            <exception cref="T:System.IO.IOException">I/O error</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.EncryptStringAsync(System.String,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String)">
            <summary>
            OpenPGP encrypts given String message using a public key located in a KeyStore
            </summary>
            
            <param name="message">Message to be encrypted</param> 
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the recipient's public key</param>
            <param name="userId">User Id or hexadecimal Key ID of the recipient's public key</param>
            <returns>The OpenPGP encrypted message in ASCII armoured format</returns>
              
            <exception cref="T:System.IO.IOException">I/O error</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.EncryptFileAsync(Windows.Storage.StorageFile,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            OpenPGP encrypts given file using the first available public key from a key ring file
            </summary>
            
            <remarks>
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            </para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="dataFile">File to be encrypted </param> 
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> object containing the encryption keys</param>
            <param name="userId">User Id or hexadecimal Key ID of the recipient's public key</param>
            <param name="encryptedFile">Output encrypted file</param>
            <param name="asciiArmor">Should the encrypted file be in ASCII Armored format. If <c>false</c> the encrypted file is in binary format.</param>
              
            <exception cref="T:System.IO.IOException">I/O error</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.EncryptFilePBEAsync(Windows.Storage.StorageFile,Windows.Storage.StorageFile,System.String,Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            OpenPGP encrypts given file using a public key and a password
            </summary>
            
            <remarks>
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            </para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="dataFile">File to be encrypted </param> 
            <param name="publicKeyFile">Recipient public key file </param>
            <param name="password">Alternative password that can be used for decryption if the decryption keey is lost</param>
            <param name="encryptedFile">Output encrypted file</param>
            <param name="asciiArmor">Should the encrypted file be in ASCII Armored format. If <c>false</c> the encrypted file is in binary format.</param>
              
            <exception cref="T:System.IO.IOException">I/O error</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.EncryptFilePBEAsync(Windows.Storage.StorageFile,System.String,Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            OpenPGP encrypts given file with a password
            </summary>
            
            <remarks>
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            </para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="dataFile">File to be encrypted </param> 
            <param name="password">Alternative password that can be used for decryption if the decryption keey is lost</param>
            <param name="encryptedFile">Output encrypted file</param>
            <param name="asciiArmor">Should the encrypted file be in ASCII Armored format. If <c>false</c> the encrypted file is in binary format.</param>
              
            <exception cref="T:System.IO.IOException">I/O error</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.EncryptStringPBEAsync(System.String,Windows.Storage.StorageFile,System.String)">
            <summary>
            OpenPGP encrypts given string message using both a public key and a password
            </summary>
            
            <remarks>
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            </para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="message">String message to be encrypted </param> 
            <param name="publicKeyFile">Recipient public key file </param>
            <param name="password">Alternative password that can be used for decryption if the decryption keey is lost</param>
            
            <returns>The source message OpenPGP encrypted</returns>
              
            <exception cref="T:System.IO.IOException">I/O error</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.EncryptStringPBEAsync(System.String,System.String)">
            <summary>
            OpenPGP encrypts given string message with a password
            </summary>
            
            <remarks>
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            </para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="message">String message to be encrypted </param> 
            <param name="password">Alternative password that can be used for decryption if the decryption keey is lost</param>
            
            <returns>The source message OpenPGP password encrypted</returns>
              
            <exception cref="T:System.IO.IOException">I/O error</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General encryption error</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.ClearSignFileV3Async(Windows.Storage.StorageFile,Windows.Storage.StorageFile,System.String,DidiSoft.Pgp.WinRT.HashAlgorithm,Windows.Storage.StorageFile)">
            <summary>
            OpenPGP clear text signs a file in the old OpenPGP signature format
            </summary>
            <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <para>
            GPG equivalent command: gpg --output outputFileName --force-v3-sigs --clearsign inputFileName 
            </para>
            </remarks>
            <seealso cref="!:ClearSignFileV3(FileInfo, FileInfo, String, HashAlgorithm, FileInfo)" />
            <seealso cref="T:DidiSoft.Pgp.WinRT.HashAlgorithm" />
            
            <param name="dataFile">File to be clear signed </param>
            <param name="privateKeyFile">Private Key file</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="hashingAlgorithm">Hashing algorithm to be used</param>
            <param name="outputFile">Output file</param>
            
            <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.ClearSignFileV3Async(Windows.Storage.StorageFile,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,System.String,DidiSoft.Pgp.WinRT.HashAlgorithm,Windows.Storage.StorageFile)">
            <summary>
            OpenPGP clear text signs a file.
            </summary>
            <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <para>
            GPG equivalent command: gpg --output outputFileName --force-v3-sigs --clearsign inputFileName 
            </para>
            </remarks>
            <seealso cref="!:ClearSignFileV3(FileInfo, FileInfo, String, HashAlgorithm, FileInfo)" />
            <seealso cref="T:DidiSoft.Pgp.WinRT.HashAlgorithm" />
            
            <param name="dataFile">File to be clear signed </param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> holding the private key that will be used for signing</param>
            <param name="userId">User Id or hexadecimal Key ID of the private key that will be used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="hashingAlgorithm">Hashing algorithm to be used</param>
            <param name="outputFile">Output file</param>
            
            <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.ClearSignStringV3Async(System.String,Windows.Storage.StorageFile,System.String,DidiSoft.Pgp.WinRT.HashAlgorithm)">
            <summary>
            OpenPGP clear text signs a String message.
            </summary>
            <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <para>
            GPG equivalent command: gpg --output outputFileName --force-v3-sigs --clearsign inputFileName 
            </para>
            </remarks>
            <seealso cref="!:ClearSignFileV3(FileInfo, FileInfo, String, HashAlgorithm, FileInfo)" />
            <seealso cref="T:DidiSoft.Pgp.WinRT.HashAlgorithm" />
            
            <param name="message">String message to be clear text signed</param>
            <param name="privateKeyFile">Private key file</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="hashingAlgorithm">Hashing algorithm to be used</param>
            <returns>OpenPGP clear text signed message</returns>
            
            <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.ClearSignStringV3Async(System.String,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,System.String,DidiSoft.Pgp.WinRT.HashAlgorithm)">
            <summary>
            OpenPGP clear text signs a String message with the old OpenPGP signature format
            </summary>
            <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <para>
            GPG equivalent command: gpg --output outputFileName --force-v3-sigs --clearsign inputFileName 
            </para>
            </remarks>
            <seealso cref="T:DidiSoft.Pgp.WinRT.HashAlgorithm" />
            
            <param name="message">String message to be clear text signed</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private key that will be used for signing</param>
            <param name="userId">User Id or hexadecimal Key ID of the private key that will be used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="hashingAlgorithm">Hashing algorithm to be used</param>
            <returns>OpenPGP clear text signed message</returns>
            
            <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.ClearSignFileAsync(Windows.Storage.StorageFile,Windows.Storage.StorageFile,System.String,DidiSoft.Pgp.WinRT.HashAlgorithm,Windows.Storage.StorageFile)">
             <summary>
             OpenPGP clear text signs a file.
             </summary>
             <remarks>
             Clear text signed messages contain both the original message in clear text and the signature used to verify 
             that the message comes from a trusted sender and has not been changed.
             <para>
             GPG equivalent command: gpg --output outputFileName --clearsign inputFileName 
             </para>
             </remarks>
             <seealso cref="!:ClearSignFileV3(FileInfo, FileInfo, String, HashAlgorithm, FileInfo)" />
             <seealso cref="T:DidiSoft.Pgp.WinRT.HashAlgorithm" />
             
             <param name="dataFile">File to be clear signed </param>
             <param name="privateKeyFile">Private Key file</param>
             <param name="privateKeyPassword">Private key password</param>
             <param name="hashingAlgorithm">Hashing algorithm to be used</param>
             <param name="outputFile">Output file</param>
             
             <example>
             This example produces a clear text signed OpenPGP message from a file located in the Documents folder. 
             <para>
             Note: Proper file access rights must be set in the Package.appxmanifest file.
             </para>
             <code lang="C#">
             using System;
             using System.Threading.Tasks;
             using Windows.Storage;
             using DidiSoft.Pgp.WinRT;
            
             public class Demo
             {
              public async Task ClearSignDemo()
              {
                StorageFile dataFile = await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt");
                // Usually our private key
                StorageFile privateKeyFile = await KnownFolders.DocumentsLibrary.GetFileAsync("my_private_key.asc");
            
                // Output file where the clear text signed data will be stored
                StorageFile signedFile = await KnownFolders.DocumentsLibrary.CreateFileAsync("output.pgp", CreationCollisionOption.ReplaceExisting);
            
                // Create an instance of the library
                PGPLibRT pgp = new PGPLibRT();
                // Password for the private key
                string privateKeyPassword = "my password";
                await pgp.ClearSignFileAsync(dataFile, privateKeyFile, privateKeyPassword, HashAlgorithm.Sha1, signedFile);
              }
             }
             </code>
             <code lang="VB">
             Imports System
             Imports System.Threading.Tasks
             Imports Windows.Storage
             Imports DidiSoft.Pgp.WinRT
             
             Public Class Demo
              Public Async Function ClearSignDemo() As Task
             	Dim dataFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt")
             	' Usually our private key
             	Dim privateKeyFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("my_private_key.asc")
             
             	' Output file where the clear text signed data will be stored
             	Dim signedFile As StorageFile = _
             	  Await KnownFolders.DocumentsLibrary.CreateFileAsync("output.pgp", _
             	                                                CreationCollisionOption.ReplaceExisting)
             
             	' Create an instance of the library
             	Dim pgp As New PGPLibRT()
             	' Password for the private key
             	Dim privateKeyPassword As String = "my password"
             	Await pgp.ClearSignFileAsync(dataFile, privateKeyFile, _
             	                        privateKeyPassword, _
             	                        HashAlgorithm.Sha1, _
             	                        signedFile)
              End Function
             End Class
             </code>
             </example>
             
             <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.ClearSignFileAsync(Windows.Storage.StorageFile,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,System.String,DidiSoft.Pgp.WinRT.HashAlgorithm,Windows.Storage.StorageFile)">
            <summary>
            OpenPGP clear text signs a file.
            </summary>
            <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <para>
            GPG equivalent command: gpg --output outputFileName --clearsign inputFileName 
            </para>
            </remarks>
            <seealso cref="!:ClearSignFileV3(FileInfo, FileInfo, String, HashAlgorithm, FileInfo)" />
            <seealso cref="T:DidiSoft.Pgp.WinRT.HashAlgorithm" />
            
            <param name="dataFile">File to be clear signed </param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> holding the private key that will be used for signing</param>
            <param name="userId">User Id or hexadecimal Key ID of the private key that will be used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="hashingAlgorithm">Hashing algorithm to be used</param>
            <param name="outputFile">Output file</param>
            
            <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.ClearSignStringAsync(System.String,Windows.Storage.StorageFile,System.String,DidiSoft.Pgp.WinRT.HashAlgorithm)">
            <summary>
            OpenPGP clear text signs a String message.
            </summary>
            <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <para>
            GPG equivalent command: gpg --output outputFileName --clearsign inputFileName 
            </para>
            </remarks>
            <seealso cref="!:ClearSignFileV3(FileInfo, FileInfo, String, HashAlgorithm, FileInfo)" />
            <seealso cref="T:DidiSoft.Pgp.WinRT.HashAlgorithm" />
            
            <param name="message">String message to be clear text signed</param>
            <param name="privateKeyFile">Private key file</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="hashingAlgorithm">Hashing algorithm to be used</param>
            <returns>OpenPGP clear text signed message</returns>
            
            <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.ClearSignStringAsync(System.String,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,System.String,DidiSoft.Pgp.WinRT.HashAlgorithm)">
            <summary>
            OpenPGP clear text signs a String message.
            </summary>
            <remarks>
            Clear text signed messages contain both the original message in clear text and the signature used to verify 
            that the message comes from a trusted sender and has not been changed.
            <para>
            GPG equivalent command: gpg --output outputFileName --clearsign inputFileName 
            </para>
            </remarks>
            <seealso cref="T:DidiSoft.Pgp.WinRT.HashAlgorithm" />
            
            <param name="message">String message to be clear text signed</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private key that will be used for signing</param>
            <param name="userId">User Id or hexadecimal Key ID of the private key that will be used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="hashingAlgorithm">Hashing algorithm to be used</param>
            <returns>OpenPGP clear text signed message</returns>
            
            <exception cref="T:System.IO.IOException">If an I/O error occures</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not suitable for signing</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the supplied private key password is incorrect</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DecryptFileAsync(Windows.Storage.StorageFile,Windows.Storage.StorageFile,System.String,Windows.Storage.StorageFile)">
             <summary> 
             Decrypts a PGP encrypted file using a private key file.
             </summary>
             
             <param name="encryptedFile">File to be decrypted </param> 
             <param name="privateKeyFile">Private key file</param>
             <param name="privateKeyPassword">Private key password</param>
             <param name="outputFile">Output file where the decrypted data will be stored</param>
             
             <returns>The original file name of the decrypted data if stored inside the PGP archive.</returns> 
            
             <example>
             This example encrypts a file located in the Documents folder. 
             <para>
             Note: Proper file access rights must be set in the Package.appxmanifest file.
             </para>
             <code lang="C#">
             using System;
             using System.Threading.Tasks;
             using Windows.Storage;
             using DidiSoft.Pgp.WinRT;
             
             public class Demo
             {
              public async void DecryptDemo()
              {
                  // File to be decrypted 
                  StorageFile encryptedFile = await KnownFolders.DocumentsLibrary.GetFileAsync("encrypted.pgp");
                  // Usually our private key
                  StorageFile privateKeyFile = await KnownFolders.DocumentsLibrary.GetFileAsync("my_private_key.asc");
                  // File where the decrypted data will be stored
                  StorageFile decryptedFile = 
                    await KnownFolders.DocumentsLibrary.CreateFileAsync("output.txt", 
                                                                        CreationCollisionOption.ReplaceExisting);
             
                  // Create an instance of the library
                  PGPLibRT pgp = new PGPLibRT();
                  // Password for the private key
                  string privateKeyPassword = "my password";
                  await pgp.DecryptFileAsync(encryptedFile, privateKeyFile, privateKeyPassword, decryptedFile);
              }
             }
             </code>
             <code lang="VB">
             Imports System
             Imports System.Threading.Tasks
             Imports Windows.Storage
             Imports DidiSoft.Pgp.WinRT
             
             Public Class Demo
             	Public Async Sub DecryptDemo()
             	    ' File to be decrypted 
             		Dim encryptedFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("output.pgp")
             		' Usually our private key
             		Dim privateKeyFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("my_private_key.asc")
             		' File where the decrypted data will be stored
             		Dim decryptedFile As StorageFile = _
             		  Await KnownFolders.DocumentsLibrary.CreateFileAsync("output.txt", _
             		                                                      CreationCollisionOption.ReplaceExisting)
             
                     ' Create an instance of the library
             		Dim pgp As New PGPLibRT()
             		' Password for the private key
             		Dim privateKeyPassword As String = "my password"
             		Await pgp.DecryptFileAsync(encryptedFile, privateKeyFile, privateKeyPassword, decryptedFile)
             	End Sub
             End Class
             </code>
             </example>
            
             <exception cref="T:System.IO.IOException">I/O error</exception>
             <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DecryptFileAsync(Windows.Storage.StorageFile,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,Windows.Storage.StorageFile)">
             <summary> 
             Decrypts a PGP encrypted file using a private key file.
             </summary>
             
             <param name="encryptedFile">File to be decrypted </param> 
             <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private decryption key</param>
             <param name="privateKeyPassword">Private key password</param>
             <param name="outputFile">Output file where the decrypted data will be stored</param>
             
             <returns>The original file name of the decrypted data if stored inside the PGP archive.</returns> 
            
             <exception cref="T:System.IO.IOException">I/O error</exception>
             <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DecryptStreamAsync(Windows.Storage.Streams.IInputStream,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,Windows.Storage.Streams.IOutputStream)">
             <summary> 
             Decrypts a PGP encrypted file using a private key file.
             </summary>
             
             <param name="encryptedStream">encrypted stream to be decrypted </param> 
             <param name="privateKeyFile">Private key file</param>
             <param name="privateKeyPassword">Private key password</param>
             <param name="outputStream">Output stream where the decrypted data will be stored</param>
             
             <returns>The original file name of the decrypted data if stored inside the PGP archive.</returns> 
            
             <exception cref="T:System.IO.IOException">I/O error</exception>
             <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DecryptStreamAsync(Windows.Storage.Streams.IInputStream,Windows.Storage.Streams.IInputStream,System.String,Windows.Storage.Streams.IOutputStream)">
             <summary> 
             Decrypts a PGP encrypted file using a private key file.
             </summary>
             
             <param name="encryptedStream">encrypted stream to be decrypted </param> 
             <param name="privateKeyStream">Private key as input stream</param>
             <param name="privateKeyPassword">Private key password</param>
             <param name="outputStream">Output stream where the decrypted data will be stored</param>
             
             <returns>The original file name of the decrypted data if stored inside the PGP archive.</returns> 
            
             <exception cref="T:System.IO.IOException">I/O error</exception>
             <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DecryptFileWithKeyStoreAsync(Windows.Storage.StorageFile,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,Windows.Storage.StorageFile)">
             <summary>
             Decrypts a PGP encrypted file using a private key file.
             </summary>
             
             <param name="encryptedFile">File to be decrypted</param> 
             <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> object containing a private key that can decrypt the file</param>
             <param name="privateKeyPassword">Private key password</param>
             <param name="outputFile">Output file where the decrypted data will be stored</param>
             
             <returns>The original file name of the decrypted data if stored inside the PGP archive.</returns> 
            
               
             <exception cref="T:System.IO.IOException">I/O error</exception>
             <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DecryptStringAsync(System.String,Windows.Storage.StorageFile,System.String)">
            <summary> 
            Decrypts an OpenPGP encrypted string message using a private key file.
            </summary>
            
            <param name="encryptedString">OpenPGP encrypted string message to be decrypted </param> 
            <param name="privateKeyFile">Private key file</param>
            <param name="privateKeyPassword">Private key password</param>
            <returns>The decryped message</returns>
              
            <exception cref="T:System.IO.IOException">I/O error</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DecryptStringWithKeyStoreAsync(System.String,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String)">
            <summary> 
            Decrypts an OpenPGP encrypted string message using a private key located in a KeyStore
            </summary>
            
            <param name="encryptedString">OpenPGP encrypted string message to be decrypted </param> 
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private key file used for decryption</param>
            <param name="privateKeyPassword">Private key password</param>
            <returns>The decryped message</returns>
              
            <exception cref="T:System.IO.IOException">I/O error</exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key cannot be used to decrypt this message</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DecryptFilePBEAsync(Windows.Storage.StorageFile,System.String,Windows.Storage.StorageFile)">
             <summary> 
             Decrypts a PGP password encrypted file
             </summary>
             
             <param name="encryptedFile">File to be decrypted</param> 
             <param name="decryptionPassword">decryption password</param>
             <param name="outputFile">Output file where the decrypted data will be stored</param>
             
             <returns>The original file name of the decrypted data if stored inside the PGP archive.</returns> 
            
             <exception cref="T:System.IO.IOException">I/O error</exception>
             <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the decryption password is incorrect</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DecryptStringPBEAsync(System.String,System.String)">
             <summary> 
             Decrypts an OpenPGP password encrypted string message
             </summary>
             
             <param name="message">OpenPGP to be decrypted</param> 
             <param name="decryptionPassword">decryption password</param>
             
             <returns>The decrypted string message</returns> 
            
             <exception cref="T:System.IO.IOException">I/O error</exception>
             <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the decryption password is incorrect</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignFileAsync(Windows.Storage.StorageFile,Windows.Storage.StorageFile,System.String,Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            Creates an OpenPGP digitally signed file containing a data file and a signature.
            </summary>   
            
            <param name="dataFile">Data file to be signed</param>
            <param name="privateKeyFile">Private key to be used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="outputFile">output file where the OpenPGP signed file is stored</param>
            <param name="asciiArmor">if <c>true</c> the output is in ASCII armored format, otherwise in binary format</param>
            
            <example>
            This example OpenPGP signs a file located in the Documents folder. 
            <para>
            Note: Proper file access rights must be set in the Package.appxmanifest file.
            </para>
            <code lang="C#">
            using System;
            using System.Threading.Tasks;
            using Windows.Storage;
            using DidiSoft.Pgp.WinRT;
            
            public class Demo
            {
             public async void SignDemo()
             {
            	StorageFile dataFile = await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt");
            	// Usually our private key
            	StorageFile privateKeyFile = await KnownFolders.DocumentsLibrary.GetFileAsync("my_private_key.asc"); 
            
            	StorageFile signedFile = 
            	  await KnownFolders.DocumentsLibrary.CreateFileAsync("output.pgp", 
            	                                                      CreationCollisionOption.ReplaceExisting);
            
                // Create an instance of the library
            	PGPLibRT pgp = new PGPLibRT();
            	// Password for the private key
            	string privateKeyPassword = "my password";
            	// should the output be in binary (false) or ASCII armoured format (true)
            	bool asciiArmour = true;
            	await pgp.SignFileAsync(dataFile, privateKeyFile, privateKeyPassword, signedFile, asciiArmour);
             }
            }
            </code>
            <code lang="VB">
            Imports System
            Imports System.Threading.Tasks
            Imports Windows.Storage
            Imports DidiSoft.Pgp.WinRT
            
            Public Class Demo
             Public Async Sub SignDemo()
            	Dim dataFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt")
            	' Usually our private key
            	Dim privateKeyFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("my_private_key.asc")
            
            	Dim signedFile As StorageFile = _
            	  Await KnownFolders.DocumentsLibrary.CreateFileAsync("output.pgp", _
            														  CreationCollisionOption.ReplaceExisting)
            
                ' Create an instance of the library
            	Dim pgp As New PGPLibRT()
            	' Password for the private key
            	Dim privateKeyPassword As String = "my password"
            	' should the output be in binary (false) or ASCII armoured format (true)
            	Dim asciiArmour As Boolean = True
            	Await pgp.SignFileAsync(dataFile, privateKeyFile, privateKeyPassword, signedFile, asciiArmour)
             End Sub
            End Class
            </code>
            </example>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignFileV3Async(Windows.Storage.StorageFile,Windows.Storage.StorageFile,System.String,Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            Creates an OpenPGP digitally signed file in the old OpenPGP signature format
            </summary>   
            
            <param name="dataFile">Data file to be signed</param>
            <param name="privateKeyFile">Private key to be used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="outputFile">output file where the OpenPGP signed file is stored</param>
            <param name="asciiArmor">if <c>true</c> the output is in ASCII armored format, otherwise in binary format</param>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignFileV3Async(Windows.Storage.StorageFile,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,System.String,Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            Creates an OpenPGP digitally signed file in the old OpenPGP signature format
            </summary>   
            
            <param name="dataFile">Data file to be signed</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private key to be used for signing</param>
            <param name="userId">User Id or hexadecimal Key ID of the private key to be used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="outputFile">output file where the OpenPGP signed file is stored</param>
            <param name="asciiArmor">if <c>true</c> the output is in ASCII armored format, otherwise in binary format</param>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignStringV3Async(System.String,Windows.Storage.StorageFile,System.String)">
            <summary>
            Creates an OpenPGP digitally signed string message in the old OpenPGP format
            </summary>   
            
            <param name="message">String message to be signed</param>
            <param name="privateKeyFile">Private key to be used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignStringV3Async(System.String,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,System.String)">
            <summary>
            Creates an OpenPGP digitally signed string message in the old OpenPGP signature format
            </summary>   
             
            <param name="message">String message to be signed</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private key to be used for signing</param>
            <param name="userId">User Id or hexadecimal Key ID of the private key to be used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            
            <returns>OpenPGP signature message in the old OpenPGP signature format</returns>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignFileAsync(Windows.Storage.StorageFile,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,System.String,Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            Creates an OpenPGP digitally signed file containing a data file and a signature.
            </summary>   
            
            <param name="dataFile">Data file to be signed</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private key to be used for signing</param>
            <param name="userId">User Id or hexadecimal Key ID of the private key to be used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="outputFile">output file where the OpenPGP signed file is stored</param>
            <param name="asciiArmor">if <c>true</c> the output is in ASCII armored format, otherwise in binary format</param>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignStreamAsync(Windows.Storage.Streams.IInputStream,System.String,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,System.String,Windows.Storage.Streams.IOutputStream,System.Boolean)">
            <summary>
            Writes an OpenPGP digitally signed output into a stream
            </summary>   
            
            <param name="dataStream">Data to be signed</param>
            <param name="internalFileName">File name label string to be associated with the signed data. When empty, a special string "_CONSOLE" will be used. </param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private key to be used for signing</param>
            <param name="userId">User Id or hexadecimal Key ID of the private key to be used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="outputStream">output stream where the OpenPGP signed data will be stored</param>
            <param name="asciiArmor">if <c>true</c> the output is in ASCII armored format, otherwise in binary format</param>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignStreamAsync(Windows.Storage.Streams.IInputStream,System.String,Windows.Storage.Streams.IInputStream,System.String,Windows.Storage.Streams.IOutputStream,System.Boolean)">
            <summary>
            Writes an OpenPGP digitally signed data into a stream.
            </summary>   
            
            <param name="dataStream">Data to be signed</param>
            <param name="internalFileName">File name label string to be associated with the signed data. When empty, a special string "_CONSOLE" will be used. </param>
            <param name="privateKeyStream">Private key to be used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="outputStream">output stream where the OpenPGP signed data is stored</param>
            <param name="asciiArmor">if <c>true</c> the output is in ASCII armored format, otherwise in binary format</param>
            
            <example>
            This example OpenPGP signs a file located in the Documents folder. 
            <para>
            Note: Proper file access rights must be set in the Package.appxmanifest file.
            </para>
            <code lang="C#">
            using System;
            using System.Threading.Tasks;
            using Windows.Storage;
            using DidiSoft.Pgp.WinRT;
            
            public class Demo
            {
             public async void SignDemo()
             {
            	StorageFile dataFile = await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt");
            	// Usually our private key
            	StorageFile privateKeyFile = await KnownFolders.DocumentsLibrary.GetFileAsync("my_private_key.asc"); 
            
            	StorageFile signedFile = 
            	  await KnownFolders.DocumentsLibrary.CreateFileAsync("output.pgp", 
            	                                                      CreationCollisionOption.ReplaceExisting);
            	var streamNewFile = await signedFile.OpenAsync(FileAccessMode.ReadWrite);
            
                // Create an instance of the library
            	PGPLibRT pgp = new PGPLibRT();
            	// Password for the private key
            	string privateKeyPassword = "my password";
            	// should the output be in binary (false) or ASCII armoured format (true)
            	bool asciiArmour = true;
            	await pgp.SignFileAsync(dataFile.OpenSequentialReadAsync(), 
            	                        privateKeyFile.OpenSequentialReadAsync(), 
            	                        privateKeyPassword, 
            	                        streamNewFile.GetOutputStreamAt(0), 
            	                        asciiArmour);
             }
            }
            </code>
            <code lang="VB">
            Imports System
            Imports System.Threading.Tasks
            Imports Windows.Storage
            Imports DidiSoft.Pgp.WinRT
            
            Public Class Demo
             Public Async Sub SignDemo()
            	Dim dataFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt")
            	' Usually our private key
            	Dim privateKeyFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("my_private_key.asc")
            
            	Dim signedFile As StorageFile = _
            	  Await KnownFolders.DocumentsLibrary.CreateFileAsync("output.pgp", _
            														  CreationCollisionOption.ReplaceExisting)
                Dim streamNewFile = Await signedFile.OpenAsync(FileAccessMode.ReadWrite)
            
                ' Create an instance of the library
            	Dim pgp As New PGPLibRT()
            	' Password for the private key
            	Dim privateKeyPassword As String = "my password"
            	' should the output be in binary (false) or ASCII armoured format (true)
            	Dim asciiArmour As Boolean = True
            	Await pgp.SignStreamAsync(dataFile.OpenSequentialReadAsync(), _
            	                        privateKeyFile.OpenSequentialReadAsync(), _
            	                        privateKeyPassword, _
            	                        streamNewFile.GetOutputStreamAt(0), _
            	                        asciiArmour)
             End Sub
            End Class
            </code>
            </example>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignStringAsync(System.String,Windows.Storage.StorageFile,System.String)">
            <summary>
            Creates an OpenPGP digitally signed string message
            </summary>   
             
            <param name="message">String message to be signed</param>
            <param name="privateKeyFile">Private key to be used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            <returns>OpenPGP signature message</returns>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignStringAsync(System.String,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,System.String)">
            <summary>
            Creates an OpenPGP digitally signed string message
            </summary>   
             
            <param name="message">String message to be signed</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private key to be used for signing</param>
            <param name="userId">User Id or hexadecimal Key ID of the private key to be used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            <returns>OpenPGP signature message</returns>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key source is not suitable for signing, or it is not a private key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.VerifyFileAsync(Windows.Storage.StorageFile,Windows.Storage.StorageFile,Windows.Storage.StorageFile)">
            <summary>
             Verifies that a file is OpenPGP signed from a trusted sender.
            </summary>   
             
             <param name="dataFile">File to be verified</param>
             <param name="publicKeyFile">Public key file that will be used for signature verification</param>
             <param name="outputFile">File where the extracted data will be stored</param>
             <returns>true if signed correctly, false if not signed with this public key</returns>
             
             <example>
             This example verifies an OpenPGP signed file located in the Documents folder. 
             <para>
             Note: Proper file access rights must be set in the Package.appxmanifest file.
             </para>
             <code lang="C#">
             using System;
             using System.Threading.Tasks;
             using Windows.Storage;
             using DidiSoft.Pgp.WinRT;
             
             public class Demo
             {
              public async void VerifyDemo()
              { 
             	StorageFile signedFile = await KnownFolders.DocumentsLibrary.GetFileAsync("signed.pgp");
             	// Usually the public key of the sender
             	StorageFile publicKeyFile = await KnownFolders.DocumentsLibrary.GetFileAsync("public_key.asc");            
             
             	StorageFile outputFile = 
             	  await KnownFolders.DocumentsLibrary.CreateFileAsync("output.txt", 
             	                                                      CreationCollisionOption.ReplaceExisting);
             
                 // Create an instance of the library
             	PGPLibRT pgp = new PGPLibRT();
             	bool signatureIsValid = await pgp.VerifyFileAsync(signedFile, publicKeyFile, outputFile);
              }
             }
             </code>
             <code lang="VB">
             Imports System
             Imports System.Threading.Tasks
             Imports Windows.Storage
             Imports DidiSoft.Pgp.WinRT
             
             Public Class Demo
              Public Async Sub VerifyDemo()
             	Dim signedFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("signed.pgp")
             	' Usually the public key of the sender
             	Dim publicKeyFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("public_key.asc")
             
             	Dim outputFile As StorageFile = _
             	  Await KnownFolders.DocumentsLibrary.CreateFileAsync("output.txt", _
             														  CreationCollisionOption.ReplaceExisting)
             
                 ' Create an instance of the library
             	Dim pgp As New PGPLibRT()
             	Dim signatureIsValid As Boolean = Await pgp.VerifyFileAsync(signedFile, publicKeyFile, outputFile)
              End Sub
             End Class
             </code>
             </example>
             
             <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
             <exception cref="!:DidiSoft.Pgp.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.VerifyStreamAsync(Windows.Storage.Streams.IInputStream,Windows.Storage.Streams.IInputStream,Windows.Storage.Streams.IOutputStream)">
            <summary>
             Verifies that a stream is OpenPGP signed from a trusted sender.
            </summary>   
             
             <param name="dataFile">File to be verified</param>
             <param name="publicKeyFile">Public key file that will be used for signature verification</param>
             <param name="outputFile">File where the extracted data will be stored</param>
             <returns>true if signed correctly, false if not signed with this public key</returns>
             
             <example>
             This example verifies an OpenPGP signed file located in the Documents folder. 
             <para>
             Note: Proper file access rights must be set in the Package.appxmanifest file.
             </para>
             <code lang="C#">
             using System;
             using System.Threading.Tasks;
             using Windows.Storage;
             using DidiSoft.Pgp.WinRT;
             
             public class Demo
             {
              public async void VerifyDemo()
              { 
             	StorageFile signedFile = await KnownFolders.DocumentsLibrary.GetFileAsync("signed.pgp");
             	// Usually the public key of the sender
             	StorageFile publicKeyFile = await KnownFolders.DocumentsLibrary.GetFileAsync("public_key.asc");            
             
             	StorageFile outputFile = 
             	  await KnownFolders.DocumentsLibrary.CreateFileAsync("output.txt", 
             	                                                      CreationCollisionOption.ReplaceExisting);
             
                 var streamNewFile = await outputFile.OpenAsync(FileAccessMode.ReadWrite);
                 
                 // Create an instance of the library
             	PGPLibRT pgp = new PGPLibRT();
             	bool signatureIsValid = await pgp.VerifyFileAsync(signedFile.OpenSequentialReadAsync(), 
             	                                                    publicKeyFile.OpenSequentialReadAsync(), 
             	                                                    streamNewFile.GetOutputStreamAt(0));
              }
             }
             </code>
             <code lang="VB">
             Imports System
             Imports System.Threading.Tasks
             Imports Windows.Storage
             Imports DidiSoft.Pgp.WinRT
             
             Public Class Demo
              Public Async Sub VerifyDemo()
             	Dim signedFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("signed.pgp")
             	' Usually the public key of the sender
             	Dim publicKeyFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("public_key.asc")
             
             	Dim outputFile As StorageFile = _
             	  Await KnownFolders.DocumentsLibrary.CreateFileAsync("output.txt", _
             														  CreationCollisionOption.ReplaceExisting)
             	Dim streamNewFile = Await outputFile.OpenAsync(FileAccessMode.ReadWrite)													  
             
                 ' Create an instance of the library
             	Dim pgp As New PGPLibRT()
             	Dim signatureIsValid As Boolean = Await pgp.VerifyFileAsync(signedFile.OpenSequentialReadAsync(), _
             	                                                            publicKeyFile.OpenSequentialReadAsync(), _
             	                                                            streamNewFile.GetOutputStreamAt(0))
              End Sub
             End Class
             </code>
             </example>
             
             <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
             <exception cref="!:DidiSoft.Pgp.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.VerifyFileWithKeyStoreAsync(Windows.Storage.StorageFile,DidiSoft.Pgp.WinRT.KeyStoreRT,Windows.Storage.StorageFile)">
            <summary>
             Verifies that a file is OpenPGP signed from a trusted sender.
            </summary>   
             
             <param name="dataFile">File to be verified</param>
             <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing public keys of trusted partners that can verify the signature of the input file</param>
             <param name="outputFile">File where the extracted data will be stored</param>
             <returns>true if signed correctly, false if not signed with a public key contained in the <see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /></returns>
             
             <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.VerifyStreamWithKeyStoreAsync(Windows.Storage.Streams.IInputStream,DidiSoft.Pgp.WinRT.KeyStoreRT,Windows.Storage.Streams.IOutputStream)">
            <summary>
             Verifies that a stream is OpenPGP signed from a trusted sender.
            </summary>   
             
             <param name="dataStream">Data to be verified</param>
             <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing public keys of trusted partners that can verify the signature of the input file</param>
             <param name="outputStream">Output stream where the extracted data will be stored</param>
             <returns>true if signed correctly, false if not signed with a public key contained in the <see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /></returns>
             
             <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.VerifyStringAsync(System.String,Windows.Storage.StorageFile)">
            <summary>
             Verifies that a string message is OpenPGP signed from a trusted sender.
            </summary>   
             
             <param name="signedString">OpenPGP signed string message</param>
             <param name="publicKeyFileName">Public key file that will be used for signature verification. This is usually the public key of the message sender</param>
             <returns><see cref="T:DidiSoft.Pgp.WinRT.SignatureVerificationResult" /> containing information is the signature valid and the extracted plain text message</returns>
             
             <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.VerifyStringWithKeyStoreAsync(System.String,DidiSoft.Pgp.WinRT.KeyStoreRT)">
            <summary>
             Verifies that a string message is OpenPGP signed from a trusted sender.
            </summary>   
             
             <param name="signedString">OpenPGP signed string message</param>
             <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing public keys of trusted recipients that will be used to verify the signed message</param>
             <returns><see cref="T:DidiSoft.Pgp.WinRT.SignatureVerificationResult" /> containing information is the signature valid and the extracted plain text message</returns>
             
             <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.FileIsEncryptedException">If the input signed message is not only signed but also encrypted.</exception>
             <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignAndEncryptFileV3Async(Windows.Storage.StorageFile,Windows.Storage.StorageFile,System.String,Windows.Storage.StorageFile,Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            OpenPGP signs and encrypts a file in one pass in the old OpenPGP signature format
            </summary>   
            
            <remarks>
            * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            </para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="dataFile">File to be OpenPGP signed and encrypted</param>
            <param name="senderPrivateKeyFile">Private key file used for signing</param>
            <param name="senderPrivateKeyPassword">Private key password</param>
            <param name="recipientPublicKeyFile">Public key to be used for encryption</param>
            <param name="outputFile">Output encrypted file</param>
            <param name="asciiArmor">if <c>true</c>, output file is in ASCII armored format</param>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">I/O error </exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignAndEncryptFileV3Async(Windows.Storage.StorageFile,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,System.String,System.String,Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            OpenPGP signs and encrypts a file in one pass in the old OpenPGP signature format
            </summary>   
            
            <remarks>
            * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            </para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="dataFile">File to be OpenPGP signed and encrypted</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private signing key and the recipient's public key</param>
            <param name="senderUserId">User Id or hexadecimal Key ID of the signing key (usually our private key)</param>
            <param name="senderPrivateKeyPassword">Private key password</param>
            <param name="recipientUserId">User Id or hexadecimal Key ID of the recipient's public key</param>
            <param name="outputFileName">Output encrypted file</param>
            <param name="asciiArmor">if <c>true</c>, output file is in ASCII armored format</param>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">I/O error </exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignAndEncryptStringV3Async(System.String,Windows.Storage.StorageFile,System.String,Windows.Storage.StorageFile)">
            <summary>
            OpenPGP signs and encrypts a string message in one pass
            </summary>   
            
            <remarks>
            * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
            <br />
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            <br />
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="message">String message to be OpenPGP signed and encrypted</param>
            <param name="senderPrivateKeyFile">Private key file used for signing</param>
            <param name="senderPrivateKeyPassword">Private key password</param>
            <param name="recipientPublicKeyFile">Public key to be used for encryption</param>
            <returns>OpenPGP signed and encrypted in one pass string message</returns>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">I/O error </exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignAndEncryptStringV3Async(System.String,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,System.String,System.String)">
            <summary>
            OpenPGP signs and encrypts a string message in one pass in the old OpenPGP signature format
            </summary>   
            
            <remarks>
            * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
            <br />
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            <br />
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="message">String message to be OpenPGP signed and encrypted</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private key for signing and the public key for encryption.</param>
            <param name="senderUserId">User Id or hexadecimal Key ID of the private key to be used for signing</param>
            <param name="senderPrivateKeyPassword">Private key password</param>
            <param name="recipientUserId">User Id or hexadecimal Key ID of the public key to be used for encryption</param>
            <returns>OpenPGP signed and encrypted in one pass string message</returns>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">I/O error </exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignAndEncryptFileAsync(Windows.Storage.StorageFile,Windows.Storage.StorageFile,System.String,Windows.Storage.StorageFile,Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            OpenPGP signs and encrypts a file in one pass
            </summary>   
            
            <remarks>
            * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            </para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="dataFile">File to be OpenPGP signed and encrypted</param>
            <param name="senderPrivateKeyFile">Private key file used for signing</param>
            <param name="senderPrivateKeyPassword">Private key password</param>
            <param name="recipientPublicKeyFile">Public key to be used for encryption</param>
            <param name="outputFile">Output encrypted file</param>
            <param name="asciiArmor">if <c>true</c>, output file is in ASCII armored format</param>
            
            <example>
            This example signs and encrypts in one pass a file located in the Documents folder. 
            <para>
            Note: Proper file access rights must be set in the Package.appxmanifest file.
            </para>
            <code lang="C#">
            using System;
            using System.Threading.Tasks;
            using Windows.Storage;
            using DidiSoft.Pgp.WinRT;
            
            public class Demo
            {
             public async Task SignAndEncryptDemo()
             {
            	StorageFile dataFile = await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt");
            	// Usually our private key
            	StorageFile privateKeyFile = await KnownFolders.DocumentsLibrary.GetFileAsync("my_private_key.asc");
            	// Usually the public key of the recipient
            	StorageFile publicKeyFile = await KnownFolders.DocumentsLibrary.GetFileAsync("public_key.asc");
            
            	// Output file where the encrypted data will be stored
            	StorageFile encryptedFile = 
            	  await KnownFolders.DocumentsLibrary.CreateFileAsync("output.pgp", 
            	                                                       CreationCollisionOption.ReplaceExisting);
            
            	// Create an instance of the library
            	PGPLibRT pgp = new PGPLibRT();
            	// Password for our private key
            	string privateKeyPassword = "my password";
            	// should the output be in binary (false) or ASCII armoured format (true)
            	bool asciiArmour = true;
            	// OpenPGP one pass sign and encrypt
            	await pgp.SignAndEncryptFileAsync(dataFile, privateKeyFile, 
            	                                   privateKeyPassword, 
            	                                   publicKeyFile, 
            	                                   encryptedFile, 
            	                                   asciiArmour);
             }
            }
            </code>
            <code lang="VB">
            Imports System
            Imports System.Threading.Tasks
            Imports Windows.Storage
            Imports DidiSoft.Pgp.WinRT
            
            Public Class Demo
             Public Async Function SignAndEncryptDemo() As Task
            	Dim dataFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt")
            	' Usually our private key
            	Dim privateKeyFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("my_private_key.asc")
            	' Usually the public key of the recipient
            	Dim publicKeyFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("public_key.asc")
            
            	' Output file where the encrypted data will be stored
            	Dim encryptedFile As StorageFile = _
            	  Await KnownFolders.DocumentsLibrary.CreateFileAsync("output.pgp", _
            														  CreationCollisionOption.ReplaceExisting)
            
            	' Create an instance of the library
            	Dim pgp As New PGPLibRT()
            	' Password for our private key
            	Dim privateKeyPassword As String = "my password"
            	' should the output be in binary (false) or ASCII armoured format (true)
            	Dim asciiArmour As Boolean = True
            	' OpenPGP one pass sign and encrypt
            	Await pgp.SignAndEncryptFileAsync(dataFile, privateKeyFile, _
            	                                privateKeyPassword, _
            	                                publicKeyFile, _
            	                                encryptedFile, _
            	                                asciiArmour)
             End Function
            End Class
            </code>
            </example>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">I/O error </exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignAndEncryptFileAsync(Windows.Storage.StorageFile,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,System.String,System.String,Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            OpenPGP signs and encrypts a file in one pass
            </summary>   
            
            <remarks>
            * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
            <para>
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            </para>
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="dataFile">File to be OpenPGP signed and encrypted</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private signing key and the recipient's public key</param>
            <param name="senderUserId">User Id or hexadecimal Key ID of the signing key (usually our private key)</param>
            <param name="senderPrivateKeyPassword">Private key password</param>
            <param name="recipientUserId">User Id or hexadecimal Key ID of the recipient's public key</param>
            <param name="outputFileName">Output encrypted file</param>
            <param name="asciiArmor">if <c>true</c>, output file is in ASCII armored format</param>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">I/O error </exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignAndEncryptStringAsync(System.String,Windows.Storage.StorageFile,System.String,Windows.Storage.StorageFile)">
            <summary>
            OpenPGP signs and encrypts a string message in one pass
            </summary>   
            
            <remarks>
            * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
            <br />
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            <br />
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="message">String message to be OpenPGP signed and encrypted</param>
            <param name="senderPrivateKeyFile">Private key file used for signing</param>
            <param name="senderPrivateKeyPassword">Private key password</param>
            <param name="recipientPublicKeyFile">Public key to be used for encryption</param>
            <returns>OpenPGP signed and encrypted in one pass string message</returns>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">I/O error </exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.SignAndEncryptStringAsync(System.String,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,System.String,System.String)">
            <summary>
            OpenPGP signs and encrypts a string message in one pass
            </summary>   
            
            <remarks>
            * (Note that this is not the same as first encrypt and then sign a file, because in that case a double compression is performed.)
            <br />
            Compression algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Compression" />
            <br />
            Symmetric cipher algorithm used is the one specified through <see cref="P:DidiSoft.Pgp.WinRT.PGPLibRT.Cypher" />
            </remarks>
            
            <param name="message">String message to be OpenPGP signed and encrypted</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private key for signing and the public key for encryption.</param>
            <param name="senderUserId">User Id or hexadecimal Key ID of the private key to be used for signing</param>
            <param name="senderPrivateKeyPassword">Private key password</param>
            <param name="recipientUserId">User Id or hexadecimal Key ID of the public key to be used for encryption</param>
            <returns>OpenPGP signed and encrypted in one pass string message</returns>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">I/O error </exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsExpiredException">If the supplied public key is expired</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.KeyIsRevokedException">If the supplied public key is revoked</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DecryptAndVerifyFileAsync(Windows.Storage.StorageFile,Windows.Storage.StorageFile,System.String,Windows.Storage.StorageFile,Windows.Storage.StorageFile)">
            <summary>
            Decrypts and verifies an OpenPGP encrypted and signed file  
            </summary>
            <remarks>
            Supports OpenPGP version 3 format too (used by PGP 2.x systems).
            </remarks>
            <seealso cref="!:SignAndEncryptFile(FileInfo, FileInfo, String, FileInfo, FileInfo, Boolean, Boolean)" />
            
            <param name="encryptedFile">File to be decrypted</param>
            <param name="privateKeyFile">Private key input file. This is usually our private key.</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="senderPublicKeyFile">Public key file. This is usually the public key of the sender.</param>
            <param name="outputFile">Output file where the decrypted data will be stored</param>
            
            <returns><c>true</c> if signature is valid, <c>false</c> if signature is invalid</returns>
            
            <example>
            This example decrypts and verifies a one pass signed and encrypted file located in the Documents folder. 
            <para>
            Note: Proper file access rights must be set in the Package.appxmanifest file.
            </para>
            <code lang="C#">
            using System;
            using System.Threading.Tasks;
            using Windows.Storage;
            using DidiSoft.Pgp.WinRT;
            
            public class Demo
            {
             public async Task DecryptAndVerifyDemo()
             {
            	// A file that is expected to be OpenPGP one pass signed and encrypted
            	StorageFile encryptedFile = await KnownFolders.DocumentsLibrary.GetFileAsync("encrypted.pgp");
            	// Usually our private key
            	StorageFile privateKeyFile = await KnownFolders.DocumentsLibrary.GetFileAsync("my_private_key.asc");
            	// Usually the public key of the sender
            	StorageFile publicKeyFile = await KnownFolders.DocumentsLibrary.GetFileAsync("public_key.asc");
            
            	// Output file where the decrypted data will be stored
            	StorageFile decryptedFile = await KnownFolders.DocumentsLibrary.CreateFileAsync("output.txt", CreationCollisionOption.ReplaceExisting);
            
            	// Create an instance of the library
            	PGPLibRT pgp = new PGPLibRT();
            	// Password for our private key
            	string privateKeyPassword = "my password";
            	// Check the validity of the digital signature and extract the data in one step
            	bool isValidSignature = await pgp.DecryptAndVerifyFileAsync(encryptedFile, privateKeyFile, privateKeyPassword, publicKeyFile, decryptedFile);
             }
            }
            </code>
            <code lang="VB">
            Imports System
            Imports System.Threading.Tasks
            Imports Windows.Storage
            Imports DidiSoft.Pgp.WinRT
            
            Public Class Demo
             Public Async Function DecryptAndVerifyDemo() As Task
            	' A file that is expected to be OpenPGP one pass signed and encrypted
            	Dim encryptedFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("encrypted.pgp")
            	' Usually our private key
            	Dim privateKeyFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("my_private_key.asc")
            	' Usually the public key of the sender
            	Dim publicKeyFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("public_key.asc")
            
            	' Output file where the decrypted data will be stored
            	Dim decryptedFile As StorageFile = _
            	  Await KnownFolders.DocumentsLibrary.CreateFileAsync("output.txt", _
            	                                                      CreationCollisionOption.ReplaceExisting)
            
            	' Create an instance of the library
            	Dim pgp As New PGPLibRT()
            	' Password for our private key
            	Dim privateKeyPassword As String = "my password"
            	' Check the validity of the digital signature and extract the data in one step
            	Dim isValidSignature As Boolean = Await pgp.DecryptAndVerifyFileAsync(encryptedFile, _
            	                                                                        privateKeyFile, _
            	                                                                        privateKeyPassword, _
            	                                                                        publicKeyFile, _
            	                                                                        decryptedFile)
             End Function
            End Class
            </code>
            </example>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">PGP decryption error</exception>
            <exception cref="T:System.IO.IOException">I/O error </exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not a private key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DecryptAndVerifyFileAsync(Windows.Storage.StorageFile,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,Windows.Storage.StorageFile)">
            <summary>
            Decrypts and verifies an OpenPGP encrypted and signed file  
            </summary>
            <remarks>
            Supports OpenPGP version 3 format too (used by PGP 2.x systems).
            </remarks>
            <seealso cref="!:SignAndEncryptFile(FileInfo, FileInfo, String, FileInfo, FileInfo, Boolean, Boolean)" />
            
            <param name="encryptedFile">File to be decrypted</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private decryption key and the sender's public key used for signature verification</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="senderPublicKeyFile">Public key file. This is usually the public key of the sender.</param>
            <param name="outputFile">Output file where the decrypted data will be stored</param>
            
            <returns><c>true</c> if signature is valid, <c>false</c> if signature is invalid</returns>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">PGP decryption error</exception>
            <exception cref="T:System.IO.IOException">I/O error </exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If there is no suitable private key for decryption</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DecryptAndVerifyStringAsync(System.String,Windows.Storage.StorageFile,System.String,Windows.Storage.StorageFile)">
            <summary>
            Decrypts and verifies an OpenPGP encrypted and signed string message  
            </summary>
            <remarks>
            Supports OpenPGP version 3 format too (used by PGP 2.x systems).
            </remarks>
            <seealso cref="!:SignAndEncryptFile(FileInfo, FileInfo, String, FileInfo, FileInfo, Boolean, Boolean)" />
            
            <param name="message">OpenPGP signed and encrypted message to be decrypted</param>
            <param name="privateKeyFile">Private key file for decryption. This is usually our private key.</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="senderPublicKeyFile">Public key file for signature verification. This is usually the public key of the sender.</param>
            
            <returns><see cref="T:DidiSoft.Pgp.WinRT.SignatureVerificationResult" /> containing information is the signature valid and the actual extracted text message</returns>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">PGP decryption error</exception>
            <exception cref="T:System.IO.IOException">I/O error </exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not a private key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DecryptAndVerifyStringAsync(System.String,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String)">
            <summary>
            Decrypts and verifies an OpenPGP encrypted and signed string message  
            </summary>
            <remarks>
            Supports OpenPGP version 3 format too (used by PGP 2.x systems).
            </remarks>
            <seealso cref="!:SignAndEncryptFile(FileInfo, FileInfo, String, FileInfo, FileInfo, Boolean, Boolean)" />
            
            <param name="message">OpenPGP signed and encrypted message to be decrypted</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private key for decryption and the public key for signature verification.</param>
            <param name="privateKeyPassword">Private key password</param>
            
            <returns><see cref="T:DidiSoft.Pgp.WinRT.SignatureVerificationResult" /> containing information is the signature valid and the actual extracted text message</returns>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">PGP decryption error</exception>
            <exception cref="T:System.IO.IOException">I/O error </exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">If the supplied private key is not a private key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">If the password for the decryption key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP encrypted message</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DetachedSignFileAsync(Windows.Storage.StorageFile,Windows.Storage.StorageFile,System.String,Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            Creates an OpenPGP detached signature for a file
            </summary>   
            
            <param name="inputFile">Data file for which a detached signature is to be created</param>
            <param name="privateKeyFile">Private key used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="outputFile">Output file where the detached signature will be stored</param>
            <param name="asciiArmor">if <c>true</c> the output is in ASCII armored format, otherwise in binary format</param>
            
            <example>
            This example creates a detached OpenPGP signature for a file located in the Documents folder. 
            <para>
            Note: Proper file access rights must be set in the Package.appxmanifest file.
            </para>
            <code lang="C#">
            using System;
            using System.Threading.Tasks;
            using Windows.Storage;
            using DidiSoft.Pgp.WinRT;
            
            public class Demo
            {
             public async Task DetachedSignDemo()
             {
            	// Data file for which a detached signature will be created
            	StorageFile dataFile = await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt");
            	// Usually our private key
            	StorageFile privateKeyFile = await KnownFolders.DocumentsLibrary.GetFileAsync("my_private_key.asc");
            	// File where the detached signature will be stored
            	StorageFile signatureFile = 
            	  await KnownFolders.DocumentsLibrary.CreateFileAsync("afile.sig", 
            	                                                      CreationCollisionOption.ReplaceExisting);
            
            	// Create an instance of the library
            	PGPLibRT pgp = new PGPLibRT();
            	// Password for the private key
            	string privateKeyPassword = "my password";
            	// should the output be in binary (false) or ASCII armoured format (true)
            	bool asciiArmour = true;
            	await pgp.DetachedSignFileAsync(dataFile, privateKeyFile, privateKeyPassword, signatureFile, asciiArmour);
             }
            }
            </code>
            <code lang="VB">
            Imports System
            Imports System.Threading.Tasks
            Imports Windows.Storage
            Imports DidiSoft.Pgp.WinRT
            
            Public Class Demo
             Public Async Function DetachedSignDemo() As Task
            	' Data file for which a detached signature will be created
            	Dim dataFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt")
            	' Usually our private key
            	Dim privateKeyFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("my_private_key.asc")
            	' File where the detached signature will be stored
            	Dim signatureFile As StorageFile = _
            	    Await KnownFolders.DocumentsLibrary.CreateFileAsync("afile.sig", _
            	                                                        CreationCollisionOption.ReplaceExisting)
            
            	' Create an instance of the library
            	Dim pgp As New PGPLibRT()
            	' Password for the private key
            	Dim privateKeyPassword As String = "my password"
            	' should the output be in binary (false) or ASCII armoured format (true)
            	Dim asciiArmour As Boolean = True
            	Await pgp.DetachedSignFileAsync(dataFile, privateKeyFile, privateKeyPassword, signatureFile, asciiArmour)
             End Function
            End Class
            </code>
            </example>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DetachedSignFileAsync(Windows.Storage.StorageFile,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,System.String,Windows.Storage.StorageFile,System.Boolean)">
            <summary>
            Creates an OpenPGP detached signature for a file
            </summary>   
            
            <param name="inputFile">Data file for which a detached signature is to be created</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private key used for signing</param>
            <param name="userId">User Id or hexadecimal Key ID of the private key used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            <param name="outputFile">Output file where the detached signature will be stored</param>
            <param name="asciiArmor">if <c>true</c> the output is in ASCII armored format, otherwise in binary format</param>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DetachedSignStringAsync(System.String,Windows.Storage.StorageFile,System.String)">
            <summary>
            Creates an OpenPGP detached signature for a string message
            </summary>   
            
            <param name="message">String message for which a detached signature is to be created</param>
            <param name="privateKeyFile">Private key used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            
            <returns>The detached signature</returns>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DetachedSignStringAsync(System.String,DidiSoft.Pgp.WinRT.KeyStoreRT,System.String,System.String)">
            <summary>
            Creates an OpenPGP detached signature for a string message
            </summary>   
            
            <param name="message">String message for which a detached signature is to be created</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the private key to be used for signing</param>
            <param name="userId">User Id or hexadecimal Key ID of the private key to be used for signing</param>
            <param name="privateKeyPassword">Private key password</param>
            
            <returns>The detached signature</returns>
            
            <exception cref="T:DidiSoft.Pgp.PGPException">if an OpenPGP related error has occurred</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPasswordException">if the supplied password for the private key is incorrect</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPrivateKeyException">if the supplied private key is not suitable for signing</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DetachedVerifyFileAsync(Windows.Storage.StorageFile,Windows.Storage.StorageFile,Windows.Storage.StorageFile)">
            <summary>
            Verifies that an OpenPGP detached signature is signed from a trusted sender.
            </summary>   
            
            <param name="inputFile">Input file containing the original message for which the detahced signature was created</param>
            <param name="signatureFile">Detached signature file</param>
            <param name="publicKeyFile">Public key for verification</param>
            <returns>true if signed correctly, false if not signed with this public key</returns>
            
            <example>
            This example verifies a detached signature for a file located in the Documents folder. 
            <para>
            Note: Proper file access rights must be set in the Package.appxmanifest file.
            </para>
            <code lang="C#">
            using System;
            using System.Threading.Tasks;
            using Windows.Storage;
            using DidiSoft.Pgp.WinRT;
            
            public class Demo
            {
             public async Task DetachedVerifyDemo()
             {
            	// Data file whose signature will be verified
            	StorageFile dataFile = await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt");
            	// Detached signature for a file
            	StorageFile signatureFile = await KnownFolders.DocumentsLibrary.GetFileAsync("afile.sig");
            	// Usually the public key of the recipient
            	StorageFile publicKeyFile = await KnownFolders.DocumentsLibrary.GetFileAsync("public_key.asc");
            
            	// Create an instance of the library
            	PGPLibRT pgp = new PGPLibRT();
            	bool signatureIsValid = await pgp.DetachedVerifyFileAsync(dataFile, signatureFile, publicKeyFile);
             }
            }
            </code>
            <code lang="VB">
            Imports System
            Imports System.Threading.Tasks
            Imports Windows.Storage
            Imports DidiSoft.Pgp.WinRT
            
            Public Class Demo
             Public Async Function DetachedVerifyDemo() As Task
            	' Data file whose signature will be verified
            	Dim dataFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("afile.txt")
            	' Detached signature for a file
            	Dim signatureFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("afile.sig")
            	' Usually the public key of the recipient
            	Dim publicKeyFile As StorageFile = Await KnownFolders.DocumentsLibrary.GetFileAsync("public_key.asc")
            
            	' Create an instance of the library
            	Dim pgp As New PGPLibRT()
            	Dim signatureIsValid As Boolean = Await pgp.DetachedVerifyFileAsync(dataFile, signatureFile, publicKeyFile)
             End Function
            End Class
            </code>
            </example>
            
            <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DetachedVerifyFileWithKeyStoreAsync(Windows.Storage.StorageFile,Windows.Storage.StorageFile,DidiSoft.Pgp.WinRT.KeyStoreRT)">
            <summary>
            Verifies that an OpenPGP detached signature is signed from a trusted sender.
            </summary>   
            
            <param name="inputFile">Input file containing the original message for which the detahced signature was created</param>
            <param name="signatureFile">Detached signature file</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing the public key for verification</param>
            <returns>true if signed correctly, false if not signed with this public key</returns>
            
            <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DetachedVerifyStringAsync(System.String,System.String,Windows.Storage.StorageFile)">
            <summary>
            Verifies that an OpenPGP detached signature is signed from a trusted sender.
            </summary>   
            
            <param name="message">String message corresponding to the detahced signature</param>
            <param name="signatureFile">Detached signature file</param>
            <param name="publicKeyFile">Public key for verification</param>
            <returns>true if signed correctly, false if not signed with this public key</returns>
            
            <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.DetachedVerifyStringWithKeyStoreAsync(System.String,System.String,DidiSoft.Pgp.WinRT.KeyStoreRT)">
            <summary>
            Verifies that an OpenPGP detached signature is signed from a trusted sender.
            </summary>   
            
            <param name="message">String message corresponding to the detahced signature</param>
            <param name="signatureFile">Detached signature file</param>
            <param name="keyStore"><see cref="T:DidiSoft.Pgp.WinRT.KeyStoreRT" /> containing a public key(s) that can be used for the signature verification</param>
            <returns>true if signed correctly, false if not signed with this public key</returns>
            
            <exception cref="T:System.IO.IOException">if a problem has occurred reading input file or public key file </exception>
            <exception cref="T:DidiSoft.Pgp.PGPException">General OpenPGP error</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.NonPGPDataException">if the input data is not a valid OpenPGP message</exception>
            <exception cref="T:DidiSoft.Pgp.Exceptions.WrongPublicKeyException">If the supplied public key is not a public key at all</exception>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.convertHash(DidiSoft.Pgp.WinRT.HashAlgorithm)">
            <summary>
            Converts between the WinRT Hash enum and the standard one 
            </summary>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.convertCompression(DidiSoft.Pgp.WinRT.CompressionAlgorithm)">
            <summary>
            Converts between the WinRT Compression enum and the standard one 
            </summary>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.convertCypher(DidiSoft.Pgp.WinRT.CypherAlgorithm)">
            <summary>
            Converts between the WinRT Compression enum and the standard one 
            </summary>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.convertKeyAlgorithm(DidiSoft.Pgp.WinRT.KeyAlgorithm)">
            <summary>
            Converts between the WinRT Compression enum and the standard one 
            </summary>
        </member>
        <member name="M:DidiSoft.Pgp.WinRT.PGPLibRT.convertContentType(DidiSoft.Pgp.WinRT.ContentDataType)">
            <summary>
            Converts between the WinRT Compression enum and the standard one 
            </summary>
        </member>
        <member name="T:DidiSoft.Pgp.WinRT.PGPSubKeyPair">
            <summary>
            Represents an OpenPGP sub key/key pair
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPSubKeyPair.EncryptionKey">
            <summary>
            Returns <c>true</c> if this key can be used for encryption, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPSubKeyPair.SigningKey">
            <summary>
            Returns <c>true</c> if this key can be used for signing, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPSubKeyPair.Revoked">
            <summary>
            Returns is this Key revoked (not usable any more).
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPSubKeyPair.KeyID">
            <summary>
            Returns the Key ID
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPSubKeyPair.KeyIDHex">
            <summary>
            Returns a string representing the hexadecimal value of the Key ID.
            <br />
            (only the lower 4 bytes of the real key id which is 8 bytes.)  
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPSubKeyPair.Fingerprint">
            <summary>
            Returns key fingerprint.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPSubKeyPair.UserIds">
            <summary>
            Returns User Id's associated with this key.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPSubKeyPair.UserId">
            <summary>
            Returns the first User Id associated with this key.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPSubKeyPair.KeySize">
            <summary>
            Returns key size in bits.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPSubKeyPair.Algorithm">
            <summary>
            Returns the name of the key encryption asymmetric algorithm.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPSubKeyPair.CreationTime">
            <summary>
            Returns when was the key created.
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.PGPSubKeyPair.ValidDays">
            <summary>
            Returns key validity period in days.
            </summary>
        </member>
        <member name="T:DidiSoft.Pgp.WinRT.SignatureVerificationResult">
            <summary>
            Holds information for a signature verification action
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.SignatureVerificationResult.IsValid">
            <summary>
            Was the signature verification successfull
            </summary>
        </member>
        <member name="P:DidiSoft.Pgp.WinRT.SignatureVerificationResult.Text">
            <summary>
            Returns the text message extracted from the OpenPGP message
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.TrustLevel.Unknown">
            <summary>
            No trust value was set. This value cannot be assigned directly.
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.TrustLevel.None">
            <summary>
            Not trusted 
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.TrustLevel.Marginal">
            <summary>
            Partially trusted third party keys
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.TrustLevel.Trusted">
            <summary>
            Maximum trust for third party keys
            </summary>
        </member>
        <member name="F:DidiSoft.Pgp.WinRT.TrustLevel.Ultimate">
            <summary>
            Ultimate trust, usually for our own private keys
            </summary>
        </member>
    </members>
</doc>
